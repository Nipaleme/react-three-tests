{"ast":null,"code":"(function () {\n  \"use strict\";\n\n  var root = this;\n  var has_require = typeof require !== \"undefined\";\n\n  var THREE = root.THREE || has_require && require(\"three\");\n\n  if (!THREE) throw new Error(\"MeshLine requires three.js\");\n\n  function MeshLine() {\n    THREE.BufferGeometry.call(this);\n    this.type = \"MeshLine\";\n    this.positions = [];\n    this.previous = [];\n    this.next = [];\n    this.side = [];\n    this.width = [];\n    this.indices_array = [];\n    this.uvs = [];\n    this.counters = [];\n    this._vertices = [];\n    this._bufferArray = [];\n    this.widthCallback = null; // Used to raycast\n\n    this.matrixWorld = new THREE.Matrix4(); // to support previous api\n\n    Object.defineProperties(this, {\n      geometry: {\n        enumerable: true,\n        get: function get() {\n          return this;\n        },\n        set: function set(value) {\n          this.setFromGeometry(value);\n        }\n      },\n      vertices: {\n        enumerable: true,\n        get: function get() {\n          return this._vertices;\n        },\n        set: function set(value) {\n          this.setVertices(value);\n        }\n      },\n      bufferArray: {\n        enumerable: true,\n        get: function get() {\n          return this._bufferArray;\n        },\n        set: function set(value) {\n          this.setBufferArray(value);\n        }\n      }\n    });\n  }\n\n  MeshLine.prototype = Object.create(THREE.BufferGeometry.prototype);\n  MeshLine.prototype.constructor = MeshLine;\n  MeshLine.prototype.isMeshLine = true;\n\n  MeshLine.prototype.setMatrixWorld = function (matrixWorld) {\n    this.matrixWorld = matrixWorld;\n  };\n\n  MeshLine.prototype.setFromGeometry = function (g, c) {\n    if (g instanceof THREE.Geometry) {\n      this.setVertices(g.vertices, c);\n    }\n\n    if (g instanceof THREE.BufferGeometry) {\n      this.setBufferArray(g.getAttribute(\"position\").array, c);\n    }\n\n    if (g instanceof Float32Array || g instanceof Array) {\n      // to support previous api\n      this.setBufferArray(g, c);\n    }\n  }; // to support previous api\n\n\n  MeshLine.prototype.setGeometry = function (g, c) {\n    this.setFromGeometry(g, c);\n  };\n\n  MeshLine.prototype.setVertices = function (vts, wcb) {\n    this._vertices = vts;\n    this.widthCallback = wcb || this.widthCallback;\n    this.positions = [];\n    this.counters = [];\n\n    for (var j = 0; j < vts.length; j++) {\n      var v = vts[j];\n      var c = j / vts.length;\n      this.positions.push(v.x, v.y, v.z);\n      this.positions.push(v.x, v.y, v.z);\n      this.counters.push(c);\n      this.counters.push(c);\n    }\n\n    this.process();\n  };\n\n  MeshLine.prototype.setBufferArray = function (ba, wcb) {\n    this._bufferArray = ba;\n    this.widthCallback = wcb || this.widthCallback;\n    this.positions = [];\n    this.counters = [];\n\n    for (var j = 0; j < ba.length; j += 3) {\n      var c = j / ba.length;\n      this.positions.push(ba[j], ba[j + 1], ba[j + 2]);\n      this.positions.push(ba[j], ba[j + 1], ba[j + 2]);\n      this.counters.push(c);\n      this.counters.push(c);\n    }\n\n    this.process();\n  };\n\n  function MeshLineRaycast(raycaster, intersects) {\n    var inverseMatrix = new THREE.Matrix4();\n    var ray = new THREE.Ray();\n    var sphere = new THREE.Sphere();\n    var interRay = new THREE.Vector3();\n    var geometry = this.geometry; // Checking boundingSphere distance to ray\n\n    sphere.copy(geometry.boundingSphere);\n    sphere.applyMatrix4(this.matrixWorld);\n\n    if (raycaster.ray.intersectSphere(sphere, interRay) === false) {\n      return;\n    }\n\n    inverseMatrix.getInverse(this.matrixWorld);\n    ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);\n    var vStart = new THREE.Vector3();\n    var vEnd = new THREE.Vector3();\n    var interSegment = new THREE.Vector3();\n    var step = this instanceof THREE.LineSegments ? 2 : 1;\n    var index = geometry.index;\n    var attributes = geometry.attributes;\n\n    if (index !== null) {\n      var indices = index.array;\n      var positions = attributes.position.array;\n      var widths = attributes.width.array;\n\n      for (var i = 0, l = indices.length - 1; i < l; i += step) {\n        var a = indices[i];\n        var b = indices[i + 1];\n        vStart.fromArray(positions, a * 3);\n        vEnd.fromArray(positions, b * 3);\n        var width = widths[Math.floor(i / 3)] != undefined ? widths[Math.floor(i / 3)] : 1;\n        var precision = raycaster.linePrecision + this.material.lineWidth * width / 2;\n        var precisionSq = precision * precision;\n        var distSq = ray.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n        if (distSq > precisionSq) continue;\n        interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n        var distance = raycaster.ray.origin.distanceTo(interRay);\n        if (distance < raycaster.near || distance > raycaster.far) continue;\n        intersects.push({\n          distance: distance,\n          // What do we want? intersection point on the ray or on the segment??\n          // point: raycaster.ray.at( distance ),\n          point: interSegment.clone().applyMatrix4(this.matrixWorld),\n          index: i,\n          face: null,\n          faceIndex: null,\n          object: this\n        }); // make event only fire once\n\n        i = l;\n      }\n    }\n  }\n\n  MeshLine.prototype.raycast = MeshLineRaycast;\n\n  MeshLine.prototype.compareV3 = function (a, b) {\n    var aa = a * 6;\n    var ab = b * 6;\n    return this.positions[aa] === this.positions[ab] && this.positions[aa + 1] === this.positions[ab + 1] && this.positions[aa + 2] === this.positions[ab + 2];\n  };\n\n  MeshLine.prototype.copyV3 = function (a) {\n    var aa = a * 6;\n    return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]];\n  };\n\n  MeshLine.prototype.process = function () {\n    var l = this.positions.length / 6;\n    this.previous = [];\n    this.next = [];\n    this.side = [];\n    this.width = [];\n    this.indices_array = [];\n    this.uvs = [];\n\n    for (var j = 0; j < l; j++) {\n      this.side.push(1);\n      this.side.push(-1);\n    }\n\n    var w;\n\n    for (var j = 0; j < l; j++) {\n      if (this.widthCallback) w = this.widthCallback(j / (l - 1));else w = 1;\n      this.width.push(w);\n      this.width.push(w);\n    }\n\n    for (var j = 0; j < l; j++) {\n      this.uvs.push(j / (l - 1), 0);\n      this.uvs.push(j / (l - 1), 1);\n    }\n\n    var v;\n\n    if (this.compareV3(0, l - 1)) {\n      v = this.copyV3(l - 2);\n    } else {\n      v = this.copyV3(0);\n    }\n\n    this.previous.push(v[0], v[1], v[2]);\n    this.previous.push(v[0], v[1], v[2]);\n\n    for (var j = 0; j < l - 1; j++) {\n      v = this.copyV3(j);\n      this.previous.push(v[0], v[1], v[2]);\n      this.previous.push(v[0], v[1], v[2]);\n    }\n\n    for (var j = 1; j < l; j++) {\n      v = this.copyV3(j);\n      this.next.push(v[0], v[1], v[2]);\n      this.next.push(v[0], v[1], v[2]);\n    }\n\n    if (this.compareV3(l - 1, 0)) {\n      v = this.copyV3(1);\n    } else {\n      v = this.copyV3(l - 1);\n    }\n\n    this.next.push(v[0], v[1], v[2]);\n    this.next.push(v[0], v[1], v[2]);\n\n    for (var j = 0; j < l - 1; j++) {\n      var n = j * 2;\n      this.indices_array.push(n, n + 1, n + 2);\n      this.indices_array.push(n + 2, n + 1, n + 3);\n    }\n\n    if (!this._attributes) {\n      this._attributes = {\n        position: new THREE.BufferAttribute(new Float32Array(this.positions), 3),\n        previous: new THREE.BufferAttribute(new Float32Array(this.previous), 3),\n        next: new THREE.BufferAttribute(new Float32Array(this.next), 3),\n        side: new THREE.BufferAttribute(new Float32Array(this.side), 1),\n        width: new THREE.BufferAttribute(new Float32Array(this.width), 1),\n        uv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\n        index: new THREE.BufferAttribute(new Uint16Array(this.indices_array), 1),\n        counters: new THREE.BufferAttribute(new Float32Array(this.counters), 1)\n      };\n    } else {\n      this._attributes.position.copyArray(new Float32Array(this.positions));\n\n      this._attributes.position.needsUpdate = true;\n\n      this._attributes.previous.copyArray(new Float32Array(this.previous));\n\n      this._attributes.previous.needsUpdate = true;\n\n      this._attributes.next.copyArray(new Float32Array(this.next));\n\n      this._attributes.next.needsUpdate = true;\n\n      this._attributes.side.copyArray(new Float32Array(this.side));\n\n      this._attributes.side.needsUpdate = true;\n\n      this._attributes.width.copyArray(new Float32Array(this.width));\n\n      this._attributes.width.needsUpdate = true;\n\n      this._attributes.uv.copyArray(new Float32Array(this.uvs));\n\n      this._attributes.uv.needsUpdate = true;\n\n      this._attributes.index.copyArray(new Uint16Array(this.indices_array));\n\n      this._attributes.index.needsUpdate = true;\n    }\n\n    this.addAttribute(\"position\", this._attributes.position);\n    this.addAttribute(\"previous\", this._attributes.previous);\n    this.addAttribute(\"next\", this._attributes.next);\n    this.addAttribute(\"side\", this._attributes.side);\n    this.addAttribute(\"width\", this._attributes.width);\n    this.addAttribute(\"uv\", this._attributes.uv);\n    this.addAttribute(\"counters\", this._attributes.counters);\n    this.setIndex(this._attributes.index);\n    this.computeBoundingSphere();\n    this.computeBoundingBox();\n  };\n\n  function memcpy(src, srcOffset, dst, dstOffset, length) {\n    var i;\n    src = src.subarray || src.slice ? src : src.buffer;\n    dst = dst.subarray || dst.slice ? dst : dst.buffer;\n    src = srcOffset ? src.subarray ? src.subarray(srcOffset, length && srcOffset + length) : src.slice(srcOffset, length && srcOffset + length) : src;\n\n    if (dst.set) {\n      dst.set(src, dstOffset);\n    } else {\n      for (i = 0; i < src.length; i++) {\n        dst[i + dstOffset] = src[i];\n      }\n    }\n\n    return dst;\n  }\n  /**\n   * Fast method to advance the line by one position.  The oldest position is removed.\n   * @param position\n   */\n\n\n  MeshLine.prototype.advance = function (position) {\n    var positions = this._attributes.position.array;\n    var previous = this._attributes.previous.array;\n    var next = this._attributes.next.array;\n    var l = positions.length; // PREVIOUS\n\n    memcpy(positions, 0, previous, 0, l); // POSITIONS\n\n    memcpy(positions, 6, positions, 0, l - 6);\n    positions[l - 6] = position.x;\n    positions[l - 5] = position.y;\n    positions[l - 4] = position.z;\n    positions[l - 3] = position.x;\n    positions[l - 2] = position.y;\n    positions[l - 1] = position.z; // NEXT\n\n    memcpy(positions, 6, next, 0, l - 6);\n    next[l - 6] = position.x;\n    next[l - 5] = position.y;\n    next[l - 4] = position.z;\n    next[l - 3] = position.x;\n    next[l - 2] = position.y;\n    next[l - 1] = position.z;\n    this._attributes.position.needsUpdate = true;\n    this._attributes.previous.needsUpdate = true;\n    this._attributes.next.needsUpdate = true;\n  };\n\n  THREE.ShaderChunk[\"meshline_vert\"] = [\"\", THREE.ShaderChunk.logdepthbuf_pars_vertex, THREE.ShaderChunk.fog_pars_vertex, \"\", \"attribute vec3 previous;\", \"attribute vec3 next;\", \"attribute float side;\", \"attribute float width;\", \"attribute float counters;\", \"\", \"uniform vec2 resolution;\", \"uniform float lineWidth;\", \"uniform vec3 color;\", \"uniform float opacity;\", \"uniform float near;\", \"uniform float far;\", \"uniform float sizeAttenuation;\", \"\", \"varying vec2 vUV;\", \"varying vec4 vColor;\", \"varying float vCounters;\", \"\", \"vec2 fix( vec4 i, float aspect ) {\", \"\", \"    vec2 res = i.xy / i.w;\", \"    res.x *= aspect;\", \"\t vCounters = counters;\", \"    return res;\", \"\", \"}\", \"\", \"void main() {\", \"\", \"    float aspect = resolution.x / resolution.y;\", \"\", \"    vColor = vec4( color, opacity );\", \"    vUV = uv;\", \"\", \"    mat4 m = projectionMatrix * modelViewMatrix;\", \"    vec4 finalPosition = m * vec4( position, 1.0 );\", \"    vec4 prevPos = m * vec4( previous, 1.0 );\", \"    vec4 nextPos = m * vec4( next, 1.0 );\", \"\", \"    vec2 currentP = fix( finalPosition, aspect );\", \"    vec2 prevP = fix( prevPos, aspect );\", \"    vec2 nextP = fix( nextPos, aspect );\", \"\", \"    float w = lineWidth * width;\", \"\", \"    vec2 dir;\", \"    if( nextP == currentP ) dir = normalize( currentP - prevP );\", \"    else if( prevP == currentP ) dir = normalize( nextP - currentP );\", \"    else {\", \"        vec2 dir1 = normalize( currentP - prevP );\", \"        vec2 dir2 = normalize( nextP - currentP );\", \"        dir = normalize( dir1 + dir2 );\", \"\", \"        vec2 perp = vec2( -dir1.y, dir1.x );\", \"        vec2 miter = vec2( -dir.y, dir.x );\", \"        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );\", \"\", \"    }\", \"\", \"    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;\", \"    vec4 normal = vec4( -dir.y, dir.x, 0., 1. );\", \"    normal.xy *= .5 * w;\", \"    normal *= projectionMatrix;\", \"    if( sizeAttenuation == 0. ) {\", \"        normal.xy *= finalPosition.w;\", \"        normal.xy /= ( vec4( resolution, 0., 1. ) * projectionMatrix ).xy;\", \"    }\", \"\", \"    vec4 offset = vec4( normal.xy * side, 0.0, 1.0 );\", \"    finalPosition.xy += offset.xy;\", \"\", \"    gl_Position = finalPosition;\", \"\", THREE.ShaderChunk.logdepthbuf_vertex, THREE.ShaderChunk.fog_vertex && \"    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\", THREE.ShaderChunk.fog_vertex, \"}\"].join(\"\\r\\n\");\n  THREE.ShaderChunk[\"meshline_frag\"] = [\"\", THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.logdepthbuf_pars_fragment, \"\", \"uniform sampler2D map;\", \"uniform sampler2D alphaMap;\", \"uniform float useMap;\", \"uniform float useAlphaMap;\", \"uniform float useDash;\", \"uniform float dashArray;\", \"uniform float dashOffset;\", \"uniform float dashRatio;\", \"uniform float visibility;\", \"uniform float alphaTest;\", \"uniform vec2 repeat;\", \"\", \"varying vec2 vUV;\", \"varying vec4 vColor;\", \"varying float vCounters;\", \"\", \"void main() {\", \"\", THREE.ShaderChunk.logdepthbuf_fragment, \"\", \"    vec4 c = vColor;\", \"    if( useMap == 1. ) c *= texture2D( map, vUV * repeat );\", \"    if( useAlphaMap == 1. ) c.a *= texture2D( alphaMap, vUV * repeat ).a;\", \"    if( c.a < alphaTest ) discard;\", \"    if( useDash == 1. ){\", \"        c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));\", \"    }\", \"    gl_FragColor = c;\", \"    gl_FragColor.a *= step(vCounters, visibility);\", \"\", THREE.ShaderChunk.fog_fragment, \"}\"].join(\"\\r\\n\");\n\n  function MeshLineMaterial(parameters) {\n    THREE.ShaderMaterial.call(this, {\n      uniforms: Object.assign({}, THREE.UniformsLib.fog, {\n        lineWidth: {\n          value: 1\n        },\n        map: {\n          value: null\n        },\n        useMap: {\n          value: 0\n        },\n        alphaMap: {\n          value: null\n        },\n        useAlphaMap: {\n          value: 0\n        },\n        color: {\n          value: new THREE.Color(0xffffff)\n        },\n        opacity: {\n          value: 1\n        },\n        resolution: {\n          value: new THREE.Vector2(1, 1)\n        },\n        sizeAttenuation: {\n          value: 1\n        },\n        near: {\n          value: 1\n        },\n        far: {\n          value: 1\n        },\n        dashArray: {\n          value: 0\n        },\n        dashOffset: {\n          value: 0\n        },\n        dashRatio: {\n          value: 0.5\n        },\n        useDash: {\n          value: 0\n        },\n        visibility: {\n          value: 1\n        },\n        alphaTest: {\n          value: 0\n        },\n        repeat: {\n          value: new THREE.Vector2(1, 1)\n        }\n      }),\n      vertexShader: THREE.ShaderChunk.meshline_vert,\n      fragmentShader: THREE.ShaderChunk.meshline_frag\n    });\n    this.type = \"MeshLineMaterial\";\n    Object.defineProperties(this, {\n      lineWidth: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.lineWidth.value;\n        },\n        set: function set(value) {\n          this.uniforms.lineWidth.value = value;\n        }\n      },\n      map: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.map.value;\n        },\n        set: function set(value) {\n          this.uniforms.map.value = value;\n        }\n      },\n      useMap: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.useMap.value;\n        },\n        set: function set(value) {\n          this.uniforms.useMap.value = value;\n        }\n      },\n      alphaMap: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.alphaMap.value;\n        },\n        set: function set(value) {\n          this.uniforms.alphaMap.value = value;\n        }\n      },\n      useAlphaMap: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.useAlphaMap.value;\n        },\n        set: function set(value) {\n          this.uniforms.useAlphaMap.value = value;\n        }\n      },\n      color: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.color.value;\n        },\n        set: function set(value) {\n          this.uniforms.color.value = value;\n        }\n      },\n      opacity: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.opacity.value;\n        },\n        set: function set(value) {\n          this.uniforms.opacity.value = value;\n        }\n      },\n      resolution: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.resolution.value;\n        },\n        set: function set(value) {\n          this.uniforms.resolution.value.copy(value);\n        }\n      },\n      sizeAttenuation: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.sizeAttenuation.value;\n        },\n        set: function set(value) {\n          this.uniforms.sizeAttenuation.value = value;\n        }\n      },\n      near: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.near.value;\n        },\n        set: function set(value) {\n          this.uniforms.near.value = value;\n        }\n      },\n      far: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.far.value;\n        },\n        set: function set(value) {\n          this.uniforms.far.value = value;\n        }\n      },\n      dashArray: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.dashArray.value;\n        },\n        set: function set(value) {\n          this.uniforms.dashArray.value = value;\n          this.useDash = value !== 0 ? 1 : 0;\n        }\n      },\n      dashOffset: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.dashOffset.value;\n        },\n        set: function set(value) {\n          this.uniforms.dashOffset.value = value;\n        }\n      },\n      dashRatio: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.dashRatio.value;\n        },\n        set: function set(value) {\n          this.uniforms.dashRatio.value = value;\n        }\n      },\n      useDash: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.useDash.value;\n        },\n        set: function set(value) {\n          this.uniforms.useDash.value = value;\n        }\n      },\n      visibility: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.visibility.value;\n        },\n        set: function set(value) {\n          this.uniforms.visibility.value = value;\n        }\n      },\n      alphaTest: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.alphaTest.value;\n        },\n        set: function set(value) {\n          this.uniforms.alphaTest.value = value;\n        }\n      },\n      repeat: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.repeat.value;\n        },\n        set: function set(value) {\n          this.uniforms.repeat.value.copy(value);\n        }\n      }\n    });\n    this.setValues(parameters);\n  }\n\n  MeshLineMaterial.prototype = Object.create(THREE.ShaderMaterial.prototype);\n  MeshLineMaterial.prototype.constructor = MeshLineMaterial;\n  MeshLineMaterial.prototype.isMeshLineMaterial = true;\n\n  MeshLineMaterial.prototype.copy = function (source) {\n    THREE.ShaderMaterial.prototype.copy.call(this, source);\n    this.lineWidth = source.lineWidth;\n    this.map = source.map;\n    this.useMap = source.useMap;\n    this.alphaMap = source.alphaMap;\n    this.useAlphaMap = source.useAlphaMap;\n    this.color.copy(source.color);\n    this.opacity = source.opacity;\n    this.resolution.copy(source.resolution);\n    this.sizeAttenuation = source.sizeAttenuation;\n    this.near = source.near;\n    this.far = source.far;\n    this.dashArray.copy(source.dashArray);\n    this.dashOffset.copy(source.dashOffset);\n    this.dashRatio.copy(source.dashRatio);\n    this.useDash = source.useDash;\n    this.visibility = source.visibility;\n    this.alphaTest = source.alphaTest;\n    this.repeat.copy(source.repeat);\n    return this;\n  };\n\n  if (typeof exports !== \"undefined\") {\n    if (typeof module !== \"undefined\" && module.exports) {\n      exports = module.exports = {\n        MeshLine: MeshLine,\n        MeshLineMaterial: MeshLineMaterial,\n        MeshLineRaycast: MeshLineRaycast\n      };\n    }\n\n    exports.MeshLine = MeshLine;\n    exports.MeshLineMaterial = MeshLineMaterial;\n    exports.MeshLineRaycast = MeshLineRaycast;\n  } else {\n    root.MeshLine = MeshLine;\n    root.MeshLineMaterial = MeshLineMaterial;\n    root.MeshLineRaycast = MeshLineRaycast;\n  }\n}).call(this);","map":{"version":3,"sources":["C:/Users/adrie/Downloads/react-three-fiber-threejs-meshline-example-forked/node_modules/threejs-meshline/src/THREE.MeshLine.js"],"names":["root","has_require","require","THREE","Error","MeshLine","BufferGeometry","call","type","positions","previous","next","side","width","indices_array","uvs","counters","_vertices","_bufferArray","widthCallback","matrixWorld","Matrix4","Object","defineProperties","geometry","enumerable","get","set","value","setFromGeometry","vertices","setVertices","bufferArray","setBufferArray","prototype","create","constructor","isMeshLine","setMatrixWorld","g","c","Geometry","getAttribute","array","Float32Array","Array","setGeometry","vts","wcb","j","length","v","push","x","y","z","process","ba","MeshLineRaycast","raycaster","intersects","inverseMatrix","ray","Ray","sphere","Sphere","interRay","Vector3","copy","boundingSphere","applyMatrix4","intersectSphere","getInverse","vStart","vEnd","interSegment","step","LineSegments","index","attributes","indices","position","widths","i","l","a","b","fromArray","Math","floor","undefined","precision","linePrecision","material","lineWidth","precisionSq","distSq","distanceSqToSegment","distance","origin","distanceTo","near","far","point","clone","face","faceIndex","object","raycast","compareV3","aa","ab","copyV3","w","n","_attributes","BufferAttribute","uv","Uint16Array","copyArray","needsUpdate","addAttribute","setIndex","computeBoundingSphere","computeBoundingBox","memcpy","src","srcOffset","dst","dstOffset","subarray","slice","buffer","advance","ShaderChunk","logdepthbuf_pars_vertex","fog_pars_vertex","logdepthbuf_vertex","fog_vertex","join","fog_pars_fragment","logdepthbuf_pars_fragment","logdepthbuf_fragment","fog_fragment","MeshLineMaterial","parameters","ShaderMaterial","uniforms","assign","UniformsLib","fog","map","useMap","alphaMap","useAlphaMap","color","Color","opacity","resolution","Vector2","sizeAttenuation","dashArray","dashOffset","dashRatio","useDash","visibility","alphaTest","repeat","vertexShader","meshline_vert","fragmentShader","meshline_frag","setValues","isMeshLineMaterial","source","exports","module"],"mappings":"AAAC,aAAW;AACX;;AAEA,MAAIA,IAAI,GAAG,IAAX;AAEA,MAAIC,WAAW,GAAG,OAAOC,OAAP,KAAmB,WAArC;;AAEA,MAAIC,KAAK,GAAGH,IAAI,CAACG,KAAL,IAAeF,WAAW,IAAIC,OAAO,CAAC,OAAD,CAAjD;;AACA,MAAI,CAACC,KAAL,EAAY,MAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;;AAEZ,WAASC,QAAT,GAAoB;AACnBF,IAAAA,KAAK,CAACG,cAAN,CAAqBC,IAArB,CAA0B,IAA1B;AACA,SAAKC,IAAL,GAAY,UAAZ;AAEA,SAAKC,SAAL,GAAiB,EAAjB;AAEA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,GAAL,GAAW,EAAX;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,YAAL,GAAoB,EAApB;AAEA,SAAKC,aAAL,GAAqB,IAArB,CAhBmB,CAkBnB;;AACA,SAAKC,WAAL,GAAmB,IAAIjB,KAAK,CAACkB,OAAV,EAAnB,CAnBmB,CAqBnB;;AACAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,IAAxB,EAA8B;AAC7BC,MAAAA,QAAQ,EAAE;AACTC,QAAAA,UAAU,EAAE,IADH;AAETC,QAAAA,GAAG,EAAE,eAAW;AACf,iBAAO,IAAP;AACA,SAJQ;AAKTC,QAAAA,GAAG,EAAE,aAASC,KAAT,EAAgB;AACpB,eAAKC,eAAL,CAAqBD,KAArB;AACA;AAPQ,OADmB;AAU7BE,MAAAA,QAAQ,EAAE;AACTL,QAAAA,UAAU,EAAE,IADH;AAETC,QAAAA,GAAG,EAAE,eAAW;AACf,iBAAO,KAAKT,SAAZ;AACA,SAJQ;AAKTU,QAAAA,GAAG,EAAE,aAASC,KAAT,EAAgB;AACpB,eAAKG,WAAL,CAAiBH,KAAjB;AACA;AAPQ,OAVmB;AAmB7BI,MAAAA,WAAW,EAAE;AACZP,QAAAA,UAAU,EAAE,IADA;AAEZC,QAAAA,GAAG,EAAE,eAAW;AACf,iBAAO,KAAKR,YAAZ;AACA,SAJW;AAKZS,QAAAA,GAAG,EAAE,aAASC,KAAT,EAAgB;AACpB,eAAKK,cAAL,CAAoBL,KAApB;AACA;AAPW;AAnBgB,KAA9B;AA6BA;;AAEDvB,EAAAA,QAAQ,CAAC6B,SAAT,GAAqBZ,MAAM,CAACa,MAAP,CAAchC,KAAK,CAACG,cAAN,CAAqB4B,SAAnC,CAArB;AACA7B,EAAAA,QAAQ,CAAC6B,SAAT,CAAmBE,WAAnB,GAAiC/B,QAAjC;AACAA,EAAAA,QAAQ,CAAC6B,SAAT,CAAmBG,UAAnB,GAAgC,IAAhC;;AAEAhC,EAAAA,QAAQ,CAAC6B,SAAT,CAAmBI,cAAnB,GAAoC,UAASlB,WAAT,EAAsB;AACzD,SAAKA,WAAL,GAAmBA,WAAnB;AACA,GAFD;;AAIAf,EAAAA,QAAQ,CAAC6B,SAAT,CAAmBL,eAAnB,GAAqC,UAASU,CAAT,EAAYC,CAAZ,EAAe;AACnD,QAAID,CAAC,YAAYpC,KAAK,CAACsC,QAAvB,EAAiC;AAChC,WAAKV,WAAL,CAAiBQ,CAAC,CAACT,QAAnB,EAA6BU,CAA7B;AACA;;AACD,QAAID,CAAC,YAAYpC,KAAK,CAACG,cAAvB,EAAuC;AACtC,WAAK2B,cAAL,CAAoBM,CAAC,CAACG,YAAF,CAAe,UAAf,EAA2BC,KAA/C,EAAsDH,CAAtD;AACA;;AACD,QAAID,CAAC,YAAYK,YAAb,IAA6BL,CAAC,YAAYM,KAA9C,EAAqD;AACpD;AACA,WAAKZ,cAAL,CAAoBM,CAApB,EAAuBC,CAAvB;AACA;AACD,GAXD,CAvEW,CAoFX;;;AACAnC,EAAAA,QAAQ,CAAC6B,SAAT,CAAmBY,WAAnB,GAAiC,UAASP,CAAT,EAAYC,CAAZ,EAAe;AAC/C,SAAKX,eAAL,CAAqBU,CAArB,EAAwBC,CAAxB;AACA,GAFD;;AAIAnC,EAAAA,QAAQ,CAAC6B,SAAT,CAAmBH,WAAnB,GAAiC,UAASgB,GAAT,EAAcC,GAAd,EAAmB;AACnD,SAAK/B,SAAL,GAAiB8B,GAAjB;AACA,SAAK5B,aAAL,GAAqB6B,GAAG,IAAI,KAAK7B,aAAjC;AACA,SAAKV,SAAL,GAAiB,EAAjB;AACA,SAAKO,QAAL,GAAgB,EAAhB;;AACA,SAAK,IAAIiC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACpC,UAAIE,CAAC,GAAGJ,GAAG,CAACE,CAAD,CAAX;AACA,UAAIT,CAAC,GAAGS,CAAC,GAAGF,GAAG,CAACG,MAAhB;AACA,WAAKzC,SAAL,CAAe2C,IAAf,CAAoBD,CAAC,CAACE,CAAtB,EAAyBF,CAAC,CAACG,CAA3B,EAA8BH,CAAC,CAACI,CAAhC;AACA,WAAK9C,SAAL,CAAe2C,IAAf,CAAoBD,CAAC,CAACE,CAAtB,EAAyBF,CAAC,CAACG,CAA3B,EAA8BH,CAAC,CAACI,CAAhC;AACA,WAAKvC,QAAL,CAAcoC,IAAd,CAAmBZ,CAAnB;AACA,WAAKxB,QAAL,CAAcoC,IAAd,CAAmBZ,CAAnB;AACA;;AACD,SAAKgB,OAAL;AACA,GAdD;;AAgBAnD,EAAAA,QAAQ,CAAC6B,SAAT,CAAmBD,cAAnB,GAAoC,UAASwB,EAAT,EAAaT,GAAb,EAAkB;AACrD,SAAK9B,YAAL,GAAoBuC,EAApB;AACA,SAAKtC,aAAL,GAAqB6B,GAAG,IAAI,KAAK7B,aAAjC;AACA,SAAKV,SAAL,GAAiB,EAAjB;AACA,SAAKO,QAAL,GAAgB,EAAhB;;AACA,SAAK,IAAIiC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,EAAE,CAACP,MAAvB,EAA+BD,CAAC,IAAI,CAApC,EAAuC;AACtC,UAAIT,CAAC,GAAGS,CAAC,GAAGQ,EAAE,CAACP,MAAf;AACA,WAAKzC,SAAL,CAAe2C,IAAf,CAAoBK,EAAE,CAACR,CAAD,CAAtB,EAA2BQ,EAAE,CAACR,CAAC,GAAG,CAAL,CAA7B,EAAsCQ,EAAE,CAACR,CAAC,GAAG,CAAL,CAAxC;AACA,WAAKxC,SAAL,CAAe2C,IAAf,CAAoBK,EAAE,CAACR,CAAD,CAAtB,EAA2BQ,EAAE,CAACR,CAAC,GAAG,CAAL,CAA7B,EAAsCQ,EAAE,CAACR,CAAC,GAAG,CAAL,CAAxC;AACA,WAAKjC,QAAL,CAAcoC,IAAd,CAAmBZ,CAAnB;AACA,WAAKxB,QAAL,CAAcoC,IAAd,CAAmBZ,CAAnB;AACA;;AACD,SAAKgB,OAAL;AACA,GAbD;;AAeA,WAASE,eAAT,CAAyBC,SAAzB,EAAoCC,UAApC,EAAgD;AAC/C,QAAIC,aAAa,GAAG,IAAI1D,KAAK,CAACkB,OAAV,EAApB;AACA,QAAIyC,GAAG,GAAG,IAAI3D,KAAK,CAAC4D,GAAV,EAAV;AACA,QAAIC,MAAM,GAAG,IAAI7D,KAAK,CAAC8D,MAAV,EAAb;AACA,QAAIC,QAAQ,GAAG,IAAI/D,KAAK,CAACgE,OAAV,EAAf;AACA,QAAI3C,QAAQ,GAAG,KAAKA,QAApB,CAL+C,CAM/C;;AAEAwC,IAAAA,MAAM,CAACI,IAAP,CAAY5C,QAAQ,CAAC6C,cAArB;AACAL,IAAAA,MAAM,CAACM,YAAP,CAAoB,KAAKlD,WAAzB;;AAEA,QAAIuC,SAAS,CAACG,GAAV,CAAcS,eAAd,CAA8BP,MAA9B,EAAsCE,QAAtC,MAAoD,KAAxD,EAA+D;AAC9D;AACA;;AAEDL,IAAAA,aAAa,CAACW,UAAd,CAAyB,KAAKpD,WAA9B;AACA0C,IAAAA,GAAG,CAACM,IAAJ,CAAST,SAAS,CAACG,GAAnB,EAAwBQ,YAAxB,CAAqCT,aAArC;AAEA,QAAIY,MAAM,GAAG,IAAItE,KAAK,CAACgE,OAAV,EAAb;AACA,QAAIO,IAAI,GAAG,IAAIvE,KAAK,CAACgE,OAAV,EAAX;AACA,QAAIQ,YAAY,GAAG,IAAIxE,KAAK,CAACgE,OAAV,EAAnB;AACA,QAAIS,IAAI,GAAG,gBAAgBzE,KAAK,CAAC0E,YAAtB,GAAqC,CAArC,GAAyC,CAApD;AACA,QAAIC,KAAK,GAAGtD,QAAQ,CAACsD,KAArB;AACA,QAAIC,UAAU,GAAGvD,QAAQ,CAACuD,UAA1B;;AAEA,QAAID,KAAK,KAAK,IAAd,EAAoB;AACnB,UAAIE,OAAO,GAAGF,KAAK,CAACnC,KAApB;AACA,UAAIlC,SAAS,GAAGsE,UAAU,CAACE,QAAX,CAAoBtC,KAApC;AACA,UAAIuC,MAAM,GAAGH,UAAU,CAAClE,KAAX,CAAiB8B,KAA9B;;AAEA,WAAK,IAAIwC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGJ,OAAO,CAAC9B,MAAR,GAAiB,CAArC,EAAwCiC,CAAC,GAAGC,CAA5C,EAA+CD,CAAC,IAAIP,IAApD,EAA0D;AACzD,YAAIS,CAAC,GAAGL,OAAO,CAACG,CAAD,CAAf;AACA,YAAIG,CAAC,GAAGN,OAAO,CAACG,CAAC,GAAG,CAAL,CAAf;AAEAV,QAAAA,MAAM,CAACc,SAAP,CAAiB9E,SAAjB,EAA4B4E,CAAC,GAAG,CAAhC;AACAX,QAAAA,IAAI,CAACa,SAAL,CAAe9E,SAAf,EAA0B6E,CAAC,GAAG,CAA9B;AACA,YAAIzE,KAAK,GACRqE,MAAM,CAACM,IAAI,CAACC,KAAL,CAAWN,CAAC,GAAG,CAAf,CAAD,CAAN,IAA6BO,SAA7B,GACGR,MAAM,CAACM,IAAI,CAACC,KAAL,CAAWN,CAAC,GAAG,CAAf,CAAD,CADT,GAEG,CAHJ;AAIA,YAAIQ,SAAS,GACZhC,SAAS,CAACiC,aAAV,GACC,KAAKC,QAAL,CAAcC,SAAd,GAA0BjF,KAA3B,GAAoC,CAFrC;AAGA,YAAIkF,WAAW,GAAGJ,SAAS,GAAGA,SAA9B;AAEA,YAAIK,MAAM,GAAGlC,GAAG,CAACmC,mBAAJ,CACZxB,MADY,EAEZC,IAFY,EAGZR,QAHY,EAIZS,YAJY,CAAb;AAOA,YAAIqB,MAAM,GAAGD,WAAb,EAA0B;AAE1B7B,QAAAA,QAAQ,CAACI,YAAT,CAAsB,KAAKlD,WAA3B,EAxByD,CAwBhB;;AAEzC,YAAI8E,QAAQ,GAAGvC,SAAS,CAACG,GAAV,CAAcqC,MAAd,CAAqBC,UAArB,CAAgClC,QAAhC,CAAf;AAEA,YAAIgC,QAAQ,GAAGvC,SAAS,CAAC0C,IAArB,IAA6BH,QAAQ,GAAGvC,SAAS,CAAC2C,GAAtD,EACC;AAED1C,QAAAA,UAAU,CAACR,IAAX,CAAgB;AACf8C,UAAAA,QAAQ,EAAEA,QADK;AAEf;AACA;AACAK,UAAAA,KAAK,EAAE5B,YAAY,CAAC6B,KAAb,GAAqBlC,YAArB,CAAkC,KAAKlD,WAAvC,CAJQ;AAKf0D,UAAAA,KAAK,EAAEK,CALQ;AAMfsB,UAAAA,IAAI,EAAE,IANS;AAOfC,UAAAA,SAAS,EAAE,IAPI;AAQfC,UAAAA,MAAM,EAAE;AARO,SAAhB,EA/ByD,CAyCzD;;AACAxB,QAAAA,CAAC,GAAGC,CAAJ;AACA;AACD;AACD;;AACD/E,EAAAA,QAAQ,CAAC6B,SAAT,CAAmB0E,OAAnB,GAA6BlD,eAA7B;;AACArD,EAAAA,QAAQ,CAAC6B,SAAT,CAAmB2E,SAAnB,GAA+B,UAASxB,CAAT,EAAYC,CAAZ,EAAe;AAC7C,QAAIwB,EAAE,GAAGzB,CAAC,GAAG,CAAb;AACA,QAAI0B,EAAE,GAAGzB,CAAC,GAAG,CAAb;AACA,WACC,KAAK7E,SAAL,CAAeqG,EAAf,MAAuB,KAAKrG,SAAL,CAAesG,EAAf,CAAvB,IACA,KAAKtG,SAAL,CAAeqG,EAAE,GAAG,CAApB,MAA2B,KAAKrG,SAAL,CAAesG,EAAE,GAAG,CAApB,CAD3B,IAEA,KAAKtG,SAAL,CAAeqG,EAAE,GAAG,CAApB,MAA2B,KAAKrG,SAAL,CAAesG,EAAE,GAAG,CAApB,CAH5B;AAKA,GARD;;AAUA1G,EAAAA,QAAQ,CAAC6B,SAAT,CAAmB8E,MAAnB,GAA4B,UAAS3B,CAAT,EAAY;AACvC,QAAIyB,EAAE,GAAGzB,CAAC,GAAG,CAAb;AACA,WAAO,CACN,KAAK5E,SAAL,CAAeqG,EAAf,CADM,EAEN,KAAKrG,SAAL,CAAeqG,EAAE,GAAG,CAApB,CAFM,EAGN,KAAKrG,SAAL,CAAeqG,EAAE,GAAG,CAApB,CAHM,CAAP;AAKA,GAPD;;AASAzG,EAAAA,QAAQ,CAAC6B,SAAT,CAAmBsB,OAAnB,GAA6B,YAAW;AACvC,QAAI4B,CAAC,GAAG,KAAK3E,SAAL,CAAeyC,MAAf,GAAwB,CAAhC;AAEA,SAAKxC,QAAL,GAAgB,EAAhB;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,GAAL,GAAW,EAAX;;AAEA,SAAK,IAAIkC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmC,CAApB,EAAuBnC,CAAC,EAAxB,EAA4B;AAC3B,WAAKrC,IAAL,CAAUwC,IAAV,CAAe,CAAf;AACA,WAAKxC,IAAL,CAAUwC,IAAV,CAAe,CAAC,CAAhB;AACA;;AAED,QAAI6D,CAAJ;;AACA,SAAK,IAAIhE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmC,CAApB,EAAuBnC,CAAC,EAAxB,EAA4B;AAC3B,UAAI,KAAK9B,aAAT,EAAwB8F,CAAC,GAAG,KAAK9F,aAAL,CAAmB8B,CAAC,IAAImC,CAAC,GAAG,CAAR,CAApB,CAAJ,CAAxB,KACK6B,CAAC,GAAG,CAAJ;AACL,WAAKpG,KAAL,CAAWuC,IAAX,CAAgB6D,CAAhB;AACA,WAAKpG,KAAL,CAAWuC,IAAX,CAAgB6D,CAAhB;AACA;;AAED,SAAK,IAAIhE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmC,CAApB,EAAuBnC,CAAC,EAAxB,EAA4B;AAC3B,WAAKlC,GAAL,CAASqC,IAAT,CAAcH,CAAC,IAAImC,CAAC,GAAG,CAAR,CAAf,EAA2B,CAA3B;AACA,WAAKrE,GAAL,CAASqC,IAAT,CAAcH,CAAC,IAAImC,CAAC,GAAG,CAAR,CAAf,EAA2B,CAA3B;AACA;;AAED,QAAIjC,CAAJ;;AAEA,QAAI,KAAK0D,SAAL,CAAe,CAAf,EAAkBzB,CAAC,GAAG,CAAtB,CAAJ,EAA8B;AAC7BjC,MAAAA,CAAC,GAAG,KAAK6D,MAAL,CAAY5B,CAAC,GAAG,CAAhB,CAAJ;AACA,KAFD,MAEO;AACNjC,MAAAA,CAAC,GAAG,KAAK6D,MAAL,CAAY,CAAZ,CAAJ;AACA;;AACD,SAAKtG,QAAL,CAAc0C,IAAd,CAAmBD,CAAC,CAAC,CAAD,CAApB,EAAyBA,CAAC,CAAC,CAAD,CAA1B,EAA+BA,CAAC,CAAC,CAAD,CAAhC;AACA,SAAKzC,QAAL,CAAc0C,IAAd,CAAmBD,CAAC,CAAC,CAAD,CAApB,EAAyBA,CAAC,CAAC,CAAD,CAA1B,EAA+BA,CAAC,CAAC,CAAD,CAAhC;;AACA,SAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmC,CAAC,GAAG,CAAxB,EAA2BnC,CAAC,EAA5B,EAAgC;AAC/BE,MAAAA,CAAC,GAAG,KAAK6D,MAAL,CAAY/D,CAAZ,CAAJ;AACA,WAAKvC,QAAL,CAAc0C,IAAd,CAAmBD,CAAC,CAAC,CAAD,CAApB,EAAyBA,CAAC,CAAC,CAAD,CAA1B,EAA+BA,CAAC,CAAC,CAAD,CAAhC;AACA,WAAKzC,QAAL,CAAc0C,IAAd,CAAmBD,CAAC,CAAC,CAAD,CAApB,EAAyBA,CAAC,CAAC,CAAD,CAA1B,EAA+BA,CAAC,CAAC,CAAD,CAAhC;AACA;;AAED,SAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmC,CAApB,EAAuBnC,CAAC,EAAxB,EAA4B;AAC3BE,MAAAA,CAAC,GAAG,KAAK6D,MAAL,CAAY/D,CAAZ,CAAJ;AACA,WAAKtC,IAAL,CAAUyC,IAAV,CAAeD,CAAC,CAAC,CAAD,CAAhB,EAAqBA,CAAC,CAAC,CAAD,CAAtB,EAA2BA,CAAC,CAAC,CAAD,CAA5B;AACA,WAAKxC,IAAL,CAAUyC,IAAV,CAAeD,CAAC,CAAC,CAAD,CAAhB,EAAqBA,CAAC,CAAC,CAAD,CAAtB,EAA2BA,CAAC,CAAC,CAAD,CAA5B;AACA;;AAED,QAAI,KAAK0D,SAAL,CAAezB,CAAC,GAAG,CAAnB,EAAsB,CAAtB,CAAJ,EAA8B;AAC7BjC,MAAAA,CAAC,GAAG,KAAK6D,MAAL,CAAY,CAAZ,CAAJ;AACA,KAFD,MAEO;AACN7D,MAAAA,CAAC,GAAG,KAAK6D,MAAL,CAAY5B,CAAC,GAAG,CAAhB,CAAJ;AACA;;AACD,SAAKzE,IAAL,CAAUyC,IAAV,CAAeD,CAAC,CAAC,CAAD,CAAhB,EAAqBA,CAAC,CAAC,CAAD,CAAtB,EAA2BA,CAAC,CAAC,CAAD,CAA5B;AACA,SAAKxC,IAAL,CAAUyC,IAAV,CAAeD,CAAC,CAAC,CAAD,CAAhB,EAAqBA,CAAC,CAAC,CAAD,CAAtB,EAA2BA,CAAC,CAAC,CAAD,CAA5B;;AAEA,SAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmC,CAAC,GAAG,CAAxB,EAA2BnC,CAAC,EAA5B,EAAgC;AAC/B,UAAIiE,CAAC,GAAGjE,CAAC,GAAG,CAAZ;AACA,WAAKnC,aAAL,CAAmBsC,IAAnB,CAAwB8D,CAAxB,EAA2BA,CAAC,GAAG,CAA/B,EAAkCA,CAAC,GAAG,CAAtC;AACA,WAAKpG,aAAL,CAAmBsC,IAAnB,CAAwB8D,CAAC,GAAG,CAA5B,EAA+BA,CAAC,GAAG,CAAnC,EAAsCA,CAAC,GAAG,CAA1C;AACA;;AACD,QAAI,CAAC,KAAKC,WAAV,EAAuB;AACtB,WAAKA,WAAL,GAAmB;AAClBlC,QAAAA,QAAQ,EAAE,IAAI9E,KAAK,CAACiH,eAAV,CACT,IAAIxE,YAAJ,CAAiB,KAAKnC,SAAtB,CADS,EAET,CAFS,CADQ;AAKlBC,QAAAA,QAAQ,EAAE,IAAIP,KAAK,CAACiH,eAAV,CACT,IAAIxE,YAAJ,CAAiB,KAAKlC,QAAtB,CADS,EAET,CAFS,CALQ;AASlBC,QAAAA,IAAI,EAAE,IAAIR,KAAK,CAACiH,eAAV,CAA0B,IAAIxE,YAAJ,CAAiB,KAAKjC,IAAtB,CAA1B,EAAuD,CAAvD,CATY;AAUlBC,QAAAA,IAAI,EAAE,IAAIT,KAAK,CAACiH,eAAV,CAA0B,IAAIxE,YAAJ,CAAiB,KAAKhC,IAAtB,CAA1B,EAAuD,CAAvD,CAVY;AAWlBC,QAAAA,KAAK,EAAE,IAAIV,KAAK,CAACiH,eAAV,CACN,IAAIxE,YAAJ,CAAiB,KAAK/B,KAAtB,CADM,EAEN,CAFM,CAXW;AAelBwG,QAAAA,EAAE,EAAE,IAAIlH,KAAK,CAACiH,eAAV,CAA0B,IAAIxE,YAAJ,CAAiB,KAAK7B,GAAtB,CAA1B,EAAsD,CAAtD,CAfc;AAgBlB+D,QAAAA,KAAK,EAAE,IAAI3E,KAAK,CAACiH,eAAV,CACN,IAAIE,WAAJ,CAAgB,KAAKxG,aAArB,CADM,EAEN,CAFM,CAhBW;AAoBlBE,QAAAA,QAAQ,EAAE,IAAIb,KAAK,CAACiH,eAAV,CACT,IAAIxE,YAAJ,CAAiB,KAAK5B,QAAtB,CADS,EAET,CAFS;AApBQ,OAAnB;AAyBA,KA1BD,MA0BO;AACN,WAAKmG,WAAL,CAAiBlC,QAAjB,CAA0BsC,SAA1B,CACC,IAAI3E,YAAJ,CAAiB,KAAKnC,SAAtB,CADD;;AAGA,WAAK0G,WAAL,CAAiBlC,QAAjB,CAA0BuC,WAA1B,GAAwC,IAAxC;;AACA,WAAKL,WAAL,CAAiBzG,QAAjB,CAA0B6G,SAA1B,CACC,IAAI3E,YAAJ,CAAiB,KAAKlC,QAAtB,CADD;;AAGA,WAAKyG,WAAL,CAAiBzG,QAAjB,CAA0B8G,WAA1B,GAAwC,IAAxC;;AACA,WAAKL,WAAL,CAAiBxG,IAAjB,CAAsB4G,SAAtB,CAAgC,IAAI3E,YAAJ,CAAiB,KAAKjC,IAAtB,CAAhC;;AACA,WAAKwG,WAAL,CAAiBxG,IAAjB,CAAsB6G,WAAtB,GAAoC,IAApC;;AACA,WAAKL,WAAL,CAAiBvG,IAAjB,CAAsB2G,SAAtB,CAAgC,IAAI3E,YAAJ,CAAiB,KAAKhC,IAAtB,CAAhC;;AACA,WAAKuG,WAAL,CAAiBvG,IAAjB,CAAsB4G,WAAtB,GAAoC,IAApC;;AACA,WAAKL,WAAL,CAAiBtG,KAAjB,CAAuB0G,SAAvB,CAAiC,IAAI3E,YAAJ,CAAiB,KAAK/B,KAAtB,CAAjC;;AACA,WAAKsG,WAAL,CAAiBtG,KAAjB,CAAuB2G,WAAvB,GAAqC,IAArC;;AACA,WAAKL,WAAL,CAAiBE,EAAjB,CAAoBE,SAApB,CAA8B,IAAI3E,YAAJ,CAAiB,KAAK7B,GAAtB,CAA9B;;AACA,WAAKoG,WAAL,CAAiBE,EAAjB,CAAoBG,WAApB,GAAkC,IAAlC;;AACA,WAAKL,WAAL,CAAiBrC,KAAjB,CAAuByC,SAAvB,CACC,IAAID,WAAJ,CAAgB,KAAKxG,aAArB,CADD;;AAGA,WAAKqG,WAAL,CAAiBrC,KAAjB,CAAuB0C,WAAvB,GAAqC,IAArC;AACA;;AAED,SAAKC,YAAL,CAAkB,UAAlB,EAA8B,KAAKN,WAAL,CAAiBlC,QAA/C;AACA,SAAKwC,YAAL,CAAkB,UAAlB,EAA8B,KAAKN,WAAL,CAAiBzG,QAA/C;AACA,SAAK+G,YAAL,CAAkB,MAAlB,EAA0B,KAAKN,WAAL,CAAiBxG,IAA3C;AACA,SAAK8G,YAAL,CAAkB,MAAlB,EAA0B,KAAKN,WAAL,CAAiBvG,IAA3C;AACA,SAAK6G,YAAL,CAAkB,OAAlB,EAA2B,KAAKN,WAAL,CAAiBtG,KAA5C;AACA,SAAK4G,YAAL,CAAkB,IAAlB,EAAwB,KAAKN,WAAL,CAAiBE,EAAzC;AACA,SAAKI,YAAL,CAAkB,UAAlB,EAA8B,KAAKN,WAAL,CAAiBnG,QAA/C;AAEA,SAAK0G,QAAL,CAAc,KAAKP,WAAL,CAAiBrC,KAA/B;AAEA,SAAK6C,qBAAL;AACA,SAAKC,kBAAL;AACA,GA3HD;;AA6HA,WAASC,MAAT,CAAgBC,GAAhB,EAAqBC,SAArB,EAAgCC,GAAhC,EAAqCC,SAArC,EAAgD/E,MAAhD,EAAwD;AACvD,QAAIiC,CAAJ;AAEA2C,IAAAA,GAAG,GAAGA,GAAG,CAACI,QAAJ,IAAgBJ,GAAG,CAACK,KAApB,GAA4BL,GAA5B,GAAkCA,GAAG,CAACM,MAA5C;AACAJ,IAAAA,GAAG,GAAGA,GAAG,CAACE,QAAJ,IAAgBF,GAAG,CAACG,KAApB,GAA4BH,GAA5B,GAAkCA,GAAG,CAACI,MAA5C;AAEAN,IAAAA,GAAG,GAAGC,SAAS,GACZD,GAAG,CAACI,QAAJ,GACCJ,GAAG,CAACI,QAAJ,CAAaH,SAAb,EAAwB7E,MAAM,IAAI6E,SAAS,GAAG7E,MAA9C,CADD,GAEC4E,GAAG,CAACK,KAAJ,CAAUJ,SAAV,EAAqB7E,MAAM,IAAI6E,SAAS,GAAG7E,MAA3C,CAHW,GAIZ4E,GAJH;;AAMA,QAAIE,GAAG,CAACrG,GAAR,EAAa;AACZqG,MAAAA,GAAG,CAACrG,GAAJ,CAAQmG,GAAR,EAAaG,SAAb;AACA,KAFD,MAEO;AACN,WAAK9C,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG2C,GAAG,CAAC5E,MAApB,EAA4BiC,CAAC,EAA7B,EAAiC;AAChC6C,QAAAA,GAAG,CAAC7C,CAAC,GAAG8C,SAAL,CAAH,GAAqBH,GAAG,CAAC3C,CAAD,CAAxB;AACA;AACD;;AAED,WAAO6C,GAAP;AACA;AAED;AACD;AACA;AACA;;;AACC3H,EAAAA,QAAQ,CAAC6B,SAAT,CAAmBmG,OAAnB,GAA6B,UAASpD,QAAT,EAAmB;AAC/C,QAAIxE,SAAS,GAAG,KAAK0G,WAAL,CAAiBlC,QAAjB,CAA0BtC,KAA1C;AACA,QAAIjC,QAAQ,GAAG,KAAKyG,WAAL,CAAiBzG,QAAjB,CAA0BiC,KAAzC;AACA,QAAIhC,IAAI,GAAG,KAAKwG,WAAL,CAAiBxG,IAAjB,CAAsBgC,KAAjC;AACA,QAAIyC,CAAC,GAAG3E,SAAS,CAACyC,MAAlB,CAJ+C,CAM/C;;AACA2E,IAAAA,MAAM,CAACpH,SAAD,EAAY,CAAZ,EAAeC,QAAf,EAAyB,CAAzB,EAA4B0E,CAA5B,CAAN,CAP+C,CAS/C;;AACAyC,IAAAA,MAAM,CAACpH,SAAD,EAAY,CAAZ,EAAeA,SAAf,EAA0B,CAA1B,EAA6B2E,CAAC,GAAG,CAAjC,CAAN;AAEA3E,IAAAA,SAAS,CAAC2E,CAAC,GAAG,CAAL,CAAT,GAAmBH,QAAQ,CAAC5B,CAA5B;AACA5C,IAAAA,SAAS,CAAC2E,CAAC,GAAG,CAAL,CAAT,GAAmBH,QAAQ,CAAC3B,CAA5B;AACA7C,IAAAA,SAAS,CAAC2E,CAAC,GAAG,CAAL,CAAT,GAAmBH,QAAQ,CAAC1B,CAA5B;AACA9C,IAAAA,SAAS,CAAC2E,CAAC,GAAG,CAAL,CAAT,GAAmBH,QAAQ,CAAC5B,CAA5B;AACA5C,IAAAA,SAAS,CAAC2E,CAAC,GAAG,CAAL,CAAT,GAAmBH,QAAQ,CAAC3B,CAA5B;AACA7C,IAAAA,SAAS,CAAC2E,CAAC,GAAG,CAAL,CAAT,GAAmBH,QAAQ,CAAC1B,CAA5B,CAjB+C,CAmB/C;;AACAsE,IAAAA,MAAM,CAACpH,SAAD,EAAY,CAAZ,EAAeE,IAAf,EAAqB,CAArB,EAAwByE,CAAC,GAAG,CAA5B,CAAN;AAEAzE,IAAAA,IAAI,CAACyE,CAAC,GAAG,CAAL,CAAJ,GAAcH,QAAQ,CAAC5B,CAAvB;AACA1C,IAAAA,IAAI,CAACyE,CAAC,GAAG,CAAL,CAAJ,GAAcH,QAAQ,CAAC3B,CAAvB;AACA3C,IAAAA,IAAI,CAACyE,CAAC,GAAG,CAAL,CAAJ,GAAcH,QAAQ,CAAC1B,CAAvB;AACA5C,IAAAA,IAAI,CAACyE,CAAC,GAAG,CAAL,CAAJ,GAAcH,QAAQ,CAAC5B,CAAvB;AACA1C,IAAAA,IAAI,CAACyE,CAAC,GAAG,CAAL,CAAJ,GAAcH,QAAQ,CAAC3B,CAAvB;AACA3C,IAAAA,IAAI,CAACyE,CAAC,GAAG,CAAL,CAAJ,GAAcH,QAAQ,CAAC1B,CAAvB;AAEA,SAAK4D,WAAL,CAAiBlC,QAAjB,CAA0BuC,WAA1B,GAAwC,IAAxC;AACA,SAAKL,WAAL,CAAiBzG,QAAjB,CAA0B8G,WAA1B,GAAwC,IAAxC;AACA,SAAKL,WAAL,CAAiBxG,IAAjB,CAAsB6G,WAAtB,GAAoC,IAApC;AACA,GAhCD;;AAkCArH,EAAAA,KAAK,CAACmI,WAAN,CAAkB,eAAlB,IAAqC,CACpC,EADoC,EAEpCnI,KAAK,CAACmI,WAAN,CAAkBC,uBAFkB,EAGpCpI,KAAK,CAACmI,WAAN,CAAkBE,eAHkB,EAIpC,EAJoC,EAKpC,0BALoC,EAMpC,sBANoC,EAOpC,uBAPoC,EAQpC,wBARoC,EASpC,2BAToC,EAUpC,EAVoC,EAWpC,0BAXoC,EAYpC,0BAZoC,EAapC,qBAboC,EAcpC,wBAdoC,EAepC,qBAfoC,EAgBpC,oBAhBoC,EAiBpC,gCAjBoC,EAkBpC,EAlBoC,EAmBpC,mBAnBoC,EAoBpC,sBApBoC,EAqBpC,0BArBoC,EAsBpC,EAtBoC,EAuBpC,oCAvBoC,EAwBpC,EAxBoC,EAyBpC,4BAzBoC,EA0BpC,sBA1BoC,EA2BpC,yBA3BoC,EA4BpC,iBA5BoC,EA6BpC,EA7BoC,EA8BpC,GA9BoC,EA+BpC,EA/BoC,EAgCpC,eAhCoC,EAiCpC,EAjCoC,EAkCpC,iDAlCoC,EAmCpC,EAnCoC,EAoCpC,sCApCoC,EAqCpC,eArCoC,EAsCpC,EAtCoC,EAuCpC,kDAvCoC,EAwCpC,qDAxCoC,EAyCpC,+CAzCoC,EA0CpC,2CA1CoC,EA2CpC,EA3CoC,EA4CpC,mDA5CoC,EA6CpC,0CA7CoC,EA8CpC,0CA9CoC,EA+CpC,EA/CoC,EAgDpC,kCAhDoC,EAiDpC,EAjDoC,EAkDpC,eAlDoC,EAmDpC,kEAnDoC,EAoDpC,uEApDoC,EAqDpC,YArDoC,EAsDpC,oDAtDoC,EAuDpC,oDAvDoC,EAwDpC,yCAxDoC,EAyDpC,EAzDoC,EA0DpC,8CA1DoC,EA2DpC,6CA3DoC,EA4DpC,4EA5DoC,EA6DpC,EA7DoC,EA8DpC,OA9DoC,EA+DpC,EA/DoC,EAgEpC,0EAhEoC,EAiEpC,kDAjEoC,EAkEpC,0BAlEoC,EAmEpC,iCAnEoC,EAoEpC,mCApEoC,EAqEpC,uCArEoC,EAsEpC,4EAtEoC,EAuEpC,OAvEoC,EAwEpC,EAxEoC,EAyEpC,uDAzEoC,EA0EpC,oCA1EoC,EA2EpC,EA3EoC,EA4EpC,kCA5EoC,EA6EpC,EA7EoC,EA8EpCrI,KAAK,CAACmI,WAAN,CAAkBG,kBA9EkB,EA+EpCtI,KAAK,CAACmI,WAAN,CAAkBI,UAAlB,IACC,gEAhFmC,EAiFpCvI,KAAK,CAACmI,WAAN,CAAkBI,UAjFkB,EAkFpC,GAlFoC,EAmFnCC,IAnFmC,CAmF9B,MAnF8B,CAArC;AAqFAxI,EAAAA,KAAK,CAACmI,WAAN,CAAkB,eAAlB,IAAqC,CACpC,EADoC,EAEpCnI,KAAK,CAACmI,WAAN,CAAkBM,iBAFkB,EAGpCzI,KAAK,CAACmI,WAAN,CAAkBO,yBAHkB,EAIpC,EAJoC,EAKpC,wBALoC,EAMpC,6BANoC,EAOpC,uBAPoC,EAQpC,4BARoC,EASpC,wBAToC,EAUpC,0BAVoC,EAWpC,2BAXoC,EAYpC,0BAZoC,EAapC,2BAboC,EAcpC,0BAdoC,EAepC,sBAfoC,EAgBpC,EAhBoC,EAiBpC,mBAjBoC,EAkBpC,sBAlBoC,EAmBpC,0BAnBoC,EAoBpC,EApBoC,EAqBpC,eArBoC,EAsBpC,EAtBoC,EAuBpC1I,KAAK,CAACmI,WAAN,CAAkBQ,oBAvBkB,EAwBpC,EAxBoC,EAyBpC,sBAzBoC,EA0BpC,6DA1BoC,EA2BpC,2EA3BoC,EA4BpC,oCA5BoC,EA6BpC,0BA7BoC,EA8BpC,wFA9BoC,EA+BpC,OA/BoC,EAgCpC,uBAhCoC,EAiCpC,oDAjCoC,EAkCpC,EAlCoC,EAmCpC3I,KAAK,CAACmI,WAAN,CAAkBS,YAnCkB,EAoCpC,GApCoC,EAqCnCJ,IArCmC,CAqC9B,MArC8B,CAArC;;AAuCA,WAASK,gBAAT,CAA0BC,UAA1B,EAAsC;AACrC9I,IAAAA,KAAK,CAAC+I,cAAN,CAAqB3I,IAArB,CAA0B,IAA1B,EAAgC;AAC/B4I,MAAAA,QAAQ,EAAE7H,MAAM,CAAC8H,MAAP,CAAc,EAAd,EAAkBjJ,KAAK,CAACkJ,WAAN,CAAkBC,GAApC,EAAyC;AAClDxD,QAAAA,SAAS,EAAE;AAAElE,UAAAA,KAAK,EAAE;AAAT,SADuC;AAElD2H,QAAAA,GAAG,EAAE;AAAE3H,UAAAA,KAAK,EAAE;AAAT,SAF6C;AAGlD4H,QAAAA,MAAM,EAAE;AAAE5H,UAAAA,KAAK,EAAE;AAAT,SAH0C;AAIlD6H,QAAAA,QAAQ,EAAE;AAAE7H,UAAAA,KAAK,EAAE;AAAT,SAJwC;AAKlD8H,QAAAA,WAAW,EAAE;AAAE9H,UAAAA,KAAK,EAAE;AAAT,SALqC;AAMlD+H,QAAAA,KAAK,EAAE;AAAE/H,UAAAA,KAAK,EAAE,IAAIzB,KAAK,CAACyJ,KAAV,CAAgB,QAAhB;AAAT,SAN2C;AAOlDC,QAAAA,OAAO,EAAE;AAAEjI,UAAAA,KAAK,EAAE;AAAT,SAPyC;AAQlDkI,QAAAA,UAAU,EAAE;AAAElI,UAAAA,KAAK,EAAE,IAAIzB,KAAK,CAAC4J,OAAV,CAAkB,CAAlB,EAAqB,CAArB;AAAT,SARsC;AASlDC,QAAAA,eAAe,EAAE;AAAEpI,UAAAA,KAAK,EAAE;AAAT,SATiC;AAUlDyE,QAAAA,IAAI,EAAE;AAAEzE,UAAAA,KAAK,EAAE;AAAT,SAV4C;AAWlD0E,QAAAA,GAAG,EAAE;AAAE1E,UAAAA,KAAK,EAAE;AAAT,SAX6C;AAYlDqI,QAAAA,SAAS,EAAE;AAAErI,UAAAA,KAAK,EAAE;AAAT,SAZuC;AAalDsI,QAAAA,UAAU,EAAE;AAAEtI,UAAAA,KAAK,EAAE;AAAT,SAbsC;AAclDuI,QAAAA,SAAS,EAAE;AAAEvI,UAAAA,KAAK,EAAE;AAAT,SAduC;AAelDwI,QAAAA,OAAO,EAAE;AAAExI,UAAAA,KAAK,EAAE;AAAT,SAfyC;AAgBlDyI,QAAAA,UAAU,EAAE;AAAEzI,UAAAA,KAAK,EAAE;AAAT,SAhBsC;AAiBlD0I,QAAAA,SAAS,EAAE;AAAE1I,UAAAA,KAAK,EAAE;AAAT,SAjBuC;AAkBlD2I,QAAAA,MAAM,EAAE;AAAE3I,UAAAA,KAAK,EAAE,IAAIzB,KAAK,CAAC4J,OAAV,CAAkB,CAAlB,EAAqB,CAArB;AAAT;AAlB0C,OAAzC,CADqB;AAsB/BS,MAAAA,YAAY,EAAErK,KAAK,CAACmI,WAAN,CAAkBmC,aAtBD;AAwB/BC,MAAAA,cAAc,EAAEvK,KAAK,CAACmI,WAAN,CAAkBqC;AAxBH,KAAhC;AA2BA,SAAKnK,IAAL,GAAY,kBAAZ;AAEAc,IAAAA,MAAM,CAACC,gBAAP,CAAwB,IAAxB,EAA8B;AAC7BuE,MAAAA,SAAS,EAAE;AACVrE,QAAAA,UAAU,EAAE,IADF;AAEVC,QAAAA,GAAG,EAAE,eAAW;AACf,iBAAO,KAAKyH,QAAL,CAAcrD,SAAd,CAAwBlE,KAA/B;AACA,SAJS;AAKVD,QAAAA,GAAG,EAAE,aAASC,KAAT,EAAgB;AACpB,eAAKuH,QAAL,CAAcrD,SAAd,CAAwBlE,KAAxB,GAAgCA,KAAhC;AACA;AAPS,OADkB;AAU7B2H,MAAAA,GAAG,EAAE;AACJ9H,QAAAA,UAAU,EAAE,IADR;AAEJC,QAAAA,GAAG,EAAE,eAAW;AACf,iBAAO,KAAKyH,QAAL,CAAcI,GAAd,CAAkB3H,KAAzB;AACA,SAJG;AAKJD,QAAAA,GAAG,EAAE,aAASC,KAAT,EAAgB;AACpB,eAAKuH,QAAL,CAAcI,GAAd,CAAkB3H,KAAlB,GAA0BA,KAA1B;AACA;AAPG,OAVwB;AAmB7B4H,MAAAA,MAAM,EAAE;AACP/H,QAAAA,UAAU,EAAE,IADL;AAEPC,QAAAA,GAAG,EAAE,eAAW;AACf,iBAAO,KAAKyH,QAAL,CAAcK,MAAd,CAAqB5H,KAA5B;AACA,SAJM;AAKPD,QAAAA,GAAG,EAAE,aAASC,KAAT,EAAgB;AACpB,eAAKuH,QAAL,CAAcK,MAAd,CAAqB5H,KAArB,GAA6BA,KAA7B;AACA;AAPM,OAnBqB;AA4B7B6H,MAAAA,QAAQ,EAAE;AACThI,QAAAA,UAAU,EAAE,IADH;AAETC,QAAAA,GAAG,EAAE,eAAW;AACf,iBAAO,KAAKyH,QAAL,CAAcM,QAAd,CAAuB7H,KAA9B;AACA,SAJQ;AAKTD,QAAAA,GAAG,EAAE,aAASC,KAAT,EAAgB;AACpB,eAAKuH,QAAL,CAAcM,QAAd,CAAuB7H,KAAvB,GAA+BA,KAA/B;AACA;AAPQ,OA5BmB;AAqC7B8H,MAAAA,WAAW,EAAE;AACZjI,QAAAA,UAAU,EAAE,IADA;AAEZC,QAAAA,GAAG,EAAE,eAAW;AACf,iBAAO,KAAKyH,QAAL,CAAcO,WAAd,CAA0B9H,KAAjC;AACA,SAJW;AAKZD,QAAAA,GAAG,EAAE,aAASC,KAAT,EAAgB;AACpB,eAAKuH,QAAL,CAAcO,WAAd,CAA0B9H,KAA1B,GAAkCA,KAAlC;AACA;AAPW,OArCgB;AA8C7B+H,MAAAA,KAAK,EAAE;AACNlI,QAAAA,UAAU,EAAE,IADN;AAENC,QAAAA,GAAG,EAAE,eAAW;AACf,iBAAO,KAAKyH,QAAL,CAAcQ,KAAd,CAAoB/H,KAA3B;AACA,SAJK;AAKND,QAAAA,GAAG,EAAE,aAASC,KAAT,EAAgB;AACpB,eAAKuH,QAAL,CAAcQ,KAAd,CAAoB/H,KAApB,GAA4BA,KAA5B;AACA;AAPK,OA9CsB;AAuD7BiI,MAAAA,OAAO,EAAE;AACRpI,QAAAA,UAAU,EAAE,IADJ;AAERC,QAAAA,GAAG,EAAE,eAAW;AACf,iBAAO,KAAKyH,QAAL,CAAcU,OAAd,CAAsBjI,KAA7B;AACA,SAJO;AAKRD,QAAAA,GAAG,EAAE,aAASC,KAAT,EAAgB;AACpB,eAAKuH,QAAL,CAAcU,OAAd,CAAsBjI,KAAtB,GAA8BA,KAA9B;AACA;AAPO,OAvDoB;AAgE7BkI,MAAAA,UAAU,EAAE;AACXrI,QAAAA,UAAU,EAAE,IADD;AAEXC,QAAAA,GAAG,EAAE,eAAW;AACf,iBAAO,KAAKyH,QAAL,CAAcW,UAAd,CAAyBlI,KAAhC;AACA,SAJU;AAKXD,QAAAA,GAAG,EAAE,aAASC,KAAT,EAAgB;AACpB,eAAKuH,QAAL,CAAcW,UAAd,CAAyBlI,KAAzB,CAA+BwC,IAA/B,CAAoCxC,KAApC;AACA;AAPU,OAhEiB;AAyE7BoI,MAAAA,eAAe,EAAE;AAChBvI,QAAAA,UAAU,EAAE,IADI;AAEhBC,QAAAA,GAAG,EAAE,eAAW;AACf,iBAAO,KAAKyH,QAAL,CAAca,eAAd,CAA8BpI,KAArC;AACA,SAJe;AAKhBD,QAAAA,GAAG,EAAE,aAASC,KAAT,EAAgB;AACpB,eAAKuH,QAAL,CAAca,eAAd,CAA8BpI,KAA9B,GAAsCA,KAAtC;AACA;AAPe,OAzEY;AAkF7ByE,MAAAA,IAAI,EAAE;AACL5E,QAAAA,UAAU,EAAE,IADP;AAELC,QAAAA,GAAG,EAAE,eAAW;AACf,iBAAO,KAAKyH,QAAL,CAAc9C,IAAd,CAAmBzE,KAA1B;AACA,SAJI;AAKLD,QAAAA,GAAG,EAAE,aAASC,KAAT,EAAgB;AACpB,eAAKuH,QAAL,CAAc9C,IAAd,CAAmBzE,KAAnB,GAA2BA,KAA3B;AACA;AAPI,OAlFuB;AA2F7B0E,MAAAA,GAAG,EAAE;AACJ7E,QAAAA,UAAU,EAAE,IADR;AAEJC,QAAAA,GAAG,EAAE,eAAW;AACf,iBAAO,KAAKyH,QAAL,CAAc7C,GAAd,CAAkB1E,KAAzB;AACA,SAJG;AAKJD,QAAAA,GAAG,EAAE,aAASC,KAAT,EAAgB;AACpB,eAAKuH,QAAL,CAAc7C,GAAd,CAAkB1E,KAAlB,GAA0BA,KAA1B;AACA;AAPG,OA3FwB;AAoG7BqI,MAAAA,SAAS,EAAE;AACVxI,QAAAA,UAAU,EAAE,IADF;AAEVC,QAAAA,GAAG,EAAE,eAAW;AACf,iBAAO,KAAKyH,QAAL,CAAcc,SAAd,CAAwBrI,KAA/B;AACA,SAJS;AAKVD,QAAAA,GAAG,EAAE,aAASC,KAAT,EAAgB;AACpB,eAAKuH,QAAL,CAAcc,SAAd,CAAwBrI,KAAxB,GAAgCA,KAAhC;AACA,eAAKwI,OAAL,GAAexI,KAAK,KAAK,CAAV,GAAc,CAAd,GAAkB,CAAjC;AACA;AARS,OApGkB;AA8G7BsI,MAAAA,UAAU,EAAE;AACXzI,QAAAA,UAAU,EAAE,IADD;AAEXC,QAAAA,GAAG,EAAE,eAAW;AACf,iBAAO,KAAKyH,QAAL,CAAce,UAAd,CAAyBtI,KAAhC;AACA,SAJU;AAKXD,QAAAA,GAAG,EAAE,aAASC,KAAT,EAAgB;AACpB,eAAKuH,QAAL,CAAce,UAAd,CAAyBtI,KAAzB,GAAiCA,KAAjC;AACA;AAPU,OA9GiB;AAuH7BuI,MAAAA,SAAS,EAAE;AACV1I,QAAAA,UAAU,EAAE,IADF;AAEVC,QAAAA,GAAG,EAAE,eAAW;AACf,iBAAO,KAAKyH,QAAL,CAAcgB,SAAd,CAAwBvI,KAA/B;AACA,SAJS;AAKVD,QAAAA,GAAG,EAAE,aAASC,KAAT,EAAgB;AACpB,eAAKuH,QAAL,CAAcgB,SAAd,CAAwBvI,KAAxB,GAAgCA,KAAhC;AACA;AAPS,OAvHkB;AAgI7BwI,MAAAA,OAAO,EAAE;AACR3I,QAAAA,UAAU,EAAE,IADJ;AAERC,QAAAA,GAAG,EAAE,eAAW;AACf,iBAAO,KAAKyH,QAAL,CAAciB,OAAd,CAAsBxI,KAA7B;AACA,SAJO;AAKRD,QAAAA,GAAG,EAAE,aAASC,KAAT,EAAgB;AACpB,eAAKuH,QAAL,CAAciB,OAAd,CAAsBxI,KAAtB,GAA8BA,KAA9B;AACA;AAPO,OAhIoB;AAyI7ByI,MAAAA,UAAU,EAAE;AACX5I,QAAAA,UAAU,EAAE,IADD;AAEXC,QAAAA,GAAG,EAAE,eAAW;AACf,iBAAO,KAAKyH,QAAL,CAAckB,UAAd,CAAyBzI,KAAhC;AACA,SAJU;AAKXD,QAAAA,GAAG,EAAE,aAASC,KAAT,EAAgB;AACpB,eAAKuH,QAAL,CAAckB,UAAd,CAAyBzI,KAAzB,GAAiCA,KAAjC;AACA;AAPU,OAzIiB;AAkJ7B0I,MAAAA,SAAS,EAAE;AACV7I,QAAAA,UAAU,EAAE,IADF;AAEVC,QAAAA,GAAG,EAAE,eAAW;AACf,iBAAO,KAAKyH,QAAL,CAAcmB,SAAd,CAAwB1I,KAA/B;AACA,SAJS;AAKVD,QAAAA,GAAG,EAAE,aAASC,KAAT,EAAgB;AACpB,eAAKuH,QAAL,CAAcmB,SAAd,CAAwB1I,KAAxB,GAAgCA,KAAhC;AACA;AAPS,OAlJkB;AA2J7B2I,MAAAA,MAAM,EAAE;AACP9I,QAAAA,UAAU,EAAE,IADL;AAEPC,QAAAA,GAAG,EAAE,eAAW;AACf,iBAAO,KAAKyH,QAAL,CAAcoB,MAAd,CAAqB3I,KAA5B;AACA,SAJM;AAKPD,QAAAA,GAAG,EAAE,aAASC,KAAT,EAAgB;AACpB,eAAKuH,QAAL,CAAcoB,MAAd,CAAqB3I,KAArB,CAA2BwC,IAA3B,CAAgCxC,KAAhC;AACA;AAPM;AA3JqB,KAA9B;AAsKA,SAAKgJ,SAAL,CAAe3B,UAAf;AACA;;AAEDD,EAAAA,gBAAgB,CAAC9G,SAAjB,GAA6BZ,MAAM,CAACa,MAAP,CAAchC,KAAK,CAAC+I,cAAN,CAAqBhH,SAAnC,CAA7B;AACA8G,EAAAA,gBAAgB,CAAC9G,SAAjB,CAA2BE,WAA3B,GAAyC4G,gBAAzC;AACAA,EAAAA,gBAAgB,CAAC9G,SAAjB,CAA2B2I,kBAA3B,GAAgD,IAAhD;;AAEA7B,EAAAA,gBAAgB,CAAC9G,SAAjB,CAA2BkC,IAA3B,GAAkC,UAAS0G,MAAT,EAAiB;AAClD3K,IAAAA,KAAK,CAAC+I,cAAN,CAAqBhH,SAArB,CAA+BkC,IAA/B,CAAoC7D,IAApC,CAAyC,IAAzC,EAA+CuK,MAA/C;AAEA,SAAKhF,SAAL,GAAiBgF,MAAM,CAAChF,SAAxB;AACA,SAAKyD,GAAL,GAAWuB,MAAM,CAACvB,GAAlB;AACA,SAAKC,MAAL,GAAcsB,MAAM,CAACtB,MAArB;AACA,SAAKC,QAAL,GAAgBqB,MAAM,CAACrB,QAAvB;AACA,SAAKC,WAAL,GAAmBoB,MAAM,CAACpB,WAA1B;AACA,SAAKC,KAAL,CAAWvF,IAAX,CAAgB0G,MAAM,CAACnB,KAAvB;AACA,SAAKE,OAAL,GAAeiB,MAAM,CAACjB,OAAtB;AACA,SAAKC,UAAL,CAAgB1F,IAAhB,CAAqB0G,MAAM,CAAChB,UAA5B;AACA,SAAKE,eAAL,GAAuBc,MAAM,CAACd,eAA9B;AACA,SAAK3D,IAAL,GAAYyE,MAAM,CAACzE,IAAnB;AACA,SAAKC,GAAL,GAAWwE,MAAM,CAACxE,GAAlB;AACA,SAAK2D,SAAL,CAAe7F,IAAf,CAAoB0G,MAAM,CAACb,SAA3B;AACA,SAAKC,UAAL,CAAgB9F,IAAhB,CAAqB0G,MAAM,CAACZ,UAA5B;AACA,SAAKC,SAAL,CAAe/F,IAAf,CAAoB0G,MAAM,CAACX,SAA3B;AACA,SAAKC,OAAL,GAAeU,MAAM,CAACV,OAAtB;AACA,SAAKC,UAAL,GAAkBS,MAAM,CAACT,UAAzB;AACA,SAAKC,SAAL,GAAiBQ,MAAM,CAACR,SAAxB;AACA,SAAKC,MAAL,CAAYnG,IAAZ,CAAiB0G,MAAM,CAACP,MAAxB;AAEA,WAAO,IAAP;AACA,GAvBD;;AAyBA,MAAI,OAAOQ,OAAP,KAAmB,WAAvB,EAAoC;AACnC,QAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACD,OAA5C,EAAqD;AACpDA,MAAAA,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiB;AAC1B1K,QAAAA,QAAQ,EAAEA,QADgB;AAE1B2I,QAAAA,gBAAgB,EAAEA,gBAFQ;AAG1BtF,QAAAA,eAAe,EAAEA;AAHS,OAA3B;AAKA;;AACDqH,IAAAA,OAAO,CAAC1K,QAAR,GAAmBA,QAAnB;AACA0K,IAAAA,OAAO,CAAC/B,gBAAR,GAA2BA,gBAA3B;AACA+B,IAAAA,OAAO,CAACrH,eAAR,GAA0BA,eAA1B;AACA,GAXD,MAWO;AACN1D,IAAAA,IAAI,CAACK,QAAL,GAAgBA,QAAhB;AACAL,IAAAA,IAAI,CAACgJ,gBAAL,GAAwBA,gBAAxB;AACAhJ,IAAAA,IAAI,CAAC0D,eAAL,GAAuBA,eAAvB;AACA;AACD,CAlwBA,EAkwBCnD,IAlwBD,CAkwBM,IAlwBN,CAAD","sourcesContent":["(function() {\n\t\"use strict\";\n\n\tvar root = this;\n\n\tvar has_require = typeof require !== \"undefined\";\n\n\tvar THREE = root.THREE || (has_require && require(\"three\"));\n\tif (!THREE) throw new Error(\"MeshLine requires three.js\");\n\n\tfunction MeshLine() {\n\t\tTHREE.BufferGeometry.call(this);\n\t\tthis.type = \"MeshLine\";\n\n\t\tthis.positions = [];\n\n\t\tthis.previous = [];\n\t\tthis.next = [];\n\t\tthis.side = [];\n\t\tthis.width = [];\n\t\tthis.indices_array = [];\n\t\tthis.uvs = [];\n\t\tthis.counters = [];\n\t\tthis._vertices = [];\n\t\tthis._bufferArray = [];\n\n\t\tthis.widthCallback = null;\n\n\t\t// Used to raycast\n\t\tthis.matrixWorld = new THREE.Matrix4();\n\n\t\t// to support previous api\n\t\tObject.defineProperties(this, {\n\t\t\tgeometry: {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\tset: function(value) {\n\t\t\t\t\tthis.setFromGeometry(value);\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertices: {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this._vertices;\n\t\t\t\t},\n\t\t\t\tset: function(value) {\n\t\t\t\t\tthis.setVertices(value);\n\t\t\t\t}\n\t\t\t},\n\t\t\tbufferArray: {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this._bufferArray;\n\t\t\t\t},\n\t\t\t\tset: function(value) {\n\t\t\t\t\tthis.setBufferArray(value);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tMeshLine.prototype = Object.create(THREE.BufferGeometry.prototype);\n\tMeshLine.prototype.constructor = MeshLine;\n\tMeshLine.prototype.isMeshLine = true;\n\n\tMeshLine.prototype.setMatrixWorld = function(matrixWorld) {\n\t\tthis.matrixWorld = matrixWorld;\n\t};\n\n\tMeshLine.prototype.setFromGeometry = function(g, c) {\n\t\tif (g instanceof THREE.Geometry) {\n\t\t\tthis.setVertices(g.vertices, c);\n\t\t}\n\t\tif (g instanceof THREE.BufferGeometry) {\n\t\t\tthis.setBufferArray(g.getAttribute(\"position\").array, c);\n\t\t}\n\t\tif (g instanceof Float32Array || g instanceof Array) {\n\t\t\t// to support previous api\n\t\t\tthis.setBufferArray(g, c);\n\t\t}\n\t};\n\n\t// to support previous api\n\tMeshLine.prototype.setGeometry = function(g, c) {\n\t\tthis.setFromGeometry(g, c);\n\t};\n\n\tMeshLine.prototype.setVertices = function(vts, wcb) {\n\t\tthis._vertices = vts;\n\t\tthis.widthCallback = wcb || this.widthCallback;\n\t\tthis.positions = [];\n\t\tthis.counters = [];\n\t\tfor (var j = 0; j < vts.length; j++) {\n\t\t\tvar v = vts[j];\n\t\t\tvar c = j / vts.length;\n\t\t\tthis.positions.push(v.x, v.y, v.z);\n\t\t\tthis.positions.push(v.x, v.y, v.z);\n\t\t\tthis.counters.push(c);\n\t\t\tthis.counters.push(c);\n\t\t}\n\t\tthis.process();\n\t};\n\n\tMeshLine.prototype.setBufferArray = function(ba, wcb) {\n\t\tthis._bufferArray = ba;\n\t\tthis.widthCallback = wcb || this.widthCallback;\n\t\tthis.positions = [];\n\t\tthis.counters = [];\n\t\tfor (var j = 0; j < ba.length; j += 3) {\n\t\t\tvar c = j / ba.length;\n\t\t\tthis.positions.push(ba[j], ba[j + 1], ba[j + 2]);\n\t\t\tthis.positions.push(ba[j], ba[j + 1], ba[j + 2]);\n\t\t\tthis.counters.push(c);\n\t\t\tthis.counters.push(c);\n\t\t}\n\t\tthis.process();\n\t};\n\n\tfunction MeshLineRaycast(raycaster, intersects) {\n\t\tvar inverseMatrix = new THREE.Matrix4();\n\t\tvar ray = new THREE.Ray();\n\t\tvar sphere = new THREE.Sphere();\n\t\tvar interRay = new THREE.Vector3();\n\t\tvar geometry = this.geometry;\n\t\t// Checking boundingSphere distance to ray\n\n\t\tsphere.copy(geometry.boundingSphere);\n\t\tsphere.applyMatrix4(this.matrixWorld);\n\n\t\tif (raycaster.ray.intersectSphere(sphere, interRay) === false) {\n\t\t\treturn;\n\t\t}\n\n\t\tinverseMatrix.getInverse(this.matrixWorld);\n\t\tray.copy(raycaster.ray).applyMatrix4(inverseMatrix);\n\n\t\tvar vStart = new THREE.Vector3();\n\t\tvar vEnd = new THREE.Vector3();\n\t\tvar interSegment = new THREE.Vector3();\n\t\tvar step = this instanceof THREE.LineSegments ? 2 : 1;\n\t\tvar index = geometry.index;\n\t\tvar attributes = geometry.attributes;\n\n\t\tif (index !== null) {\n\t\t\tvar indices = index.array;\n\t\t\tvar positions = attributes.position.array;\n\t\t\tvar widths = attributes.width.array;\n\n\t\t\tfor (var i = 0, l = indices.length - 1; i < l; i += step) {\n\t\t\t\tvar a = indices[i];\n\t\t\t\tvar b = indices[i + 1];\n\n\t\t\t\tvStart.fromArray(positions, a * 3);\n\t\t\t\tvEnd.fromArray(positions, b * 3);\n\t\t\t\tvar width =\n\t\t\t\t\twidths[Math.floor(i / 3)] != undefined\n\t\t\t\t\t\t? widths[Math.floor(i / 3)]\n\t\t\t\t\t\t: 1;\n\t\t\t\tvar precision =\n\t\t\t\t\traycaster.linePrecision +\n\t\t\t\t\t(this.material.lineWidth * width) / 2;\n\t\t\t\tvar precisionSq = precision * precision;\n\n\t\t\t\tvar distSq = ray.distanceSqToSegment(\n\t\t\t\t\tvStart,\n\t\t\t\t\tvEnd,\n\t\t\t\t\tinterRay,\n\t\t\t\t\tinterSegment\n\t\t\t\t);\n\n\t\t\t\tif (distSq > precisionSq) continue;\n\n\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo(interRay);\n\n\t\t\t\tif (distance < raycaster.near || distance > raycaster.far)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tintersects.push({\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\tindex: i,\n\t\t\t\t\tface: null,\n\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\tobject: this\n\t\t\t\t});\n\t\t\t\t// make event only fire once\n\t\t\t\ti = l;\n\t\t\t}\n\t\t}\n\t}\n\tMeshLine.prototype.raycast = MeshLineRaycast;\n\tMeshLine.prototype.compareV3 = function(a, b) {\n\t\tvar aa = a * 6;\n\t\tvar ab = b * 6;\n\t\treturn (\n\t\t\tthis.positions[aa] === this.positions[ab] &&\n\t\t\tthis.positions[aa + 1] === this.positions[ab + 1] &&\n\t\t\tthis.positions[aa + 2] === this.positions[ab + 2]\n\t\t);\n\t};\n\n\tMeshLine.prototype.copyV3 = function(a) {\n\t\tvar aa = a * 6;\n\t\treturn [\n\t\t\tthis.positions[aa],\n\t\t\tthis.positions[aa + 1],\n\t\t\tthis.positions[aa + 2]\n\t\t];\n\t};\n\n\tMeshLine.prototype.process = function() {\n\t\tvar l = this.positions.length / 6;\n\n\t\tthis.previous = [];\n\t\tthis.next = [];\n\t\tthis.side = [];\n\t\tthis.width = [];\n\t\tthis.indices_array = [];\n\t\tthis.uvs = [];\n\n\t\tfor (var j = 0; j < l; j++) {\n\t\t\tthis.side.push(1);\n\t\t\tthis.side.push(-1);\n\t\t}\n\n\t\tvar w;\n\t\tfor (var j = 0; j < l; j++) {\n\t\t\tif (this.widthCallback) w = this.widthCallback(j / (l - 1));\n\t\t\telse w = 1;\n\t\t\tthis.width.push(w);\n\t\t\tthis.width.push(w);\n\t\t}\n\n\t\tfor (var j = 0; j < l; j++) {\n\t\t\tthis.uvs.push(j / (l - 1), 0);\n\t\t\tthis.uvs.push(j / (l - 1), 1);\n\t\t}\n\n\t\tvar v;\n\n\t\tif (this.compareV3(0, l - 1)) {\n\t\t\tv = this.copyV3(l - 2);\n\t\t} else {\n\t\t\tv = this.copyV3(0);\n\t\t}\n\t\tthis.previous.push(v[0], v[1], v[2]);\n\t\tthis.previous.push(v[0], v[1], v[2]);\n\t\tfor (var j = 0; j < l - 1; j++) {\n\t\t\tv = this.copyV3(j);\n\t\t\tthis.previous.push(v[0], v[1], v[2]);\n\t\t\tthis.previous.push(v[0], v[1], v[2]);\n\t\t}\n\n\t\tfor (var j = 1; j < l; j++) {\n\t\t\tv = this.copyV3(j);\n\t\t\tthis.next.push(v[0], v[1], v[2]);\n\t\t\tthis.next.push(v[0], v[1], v[2]);\n\t\t}\n\n\t\tif (this.compareV3(l - 1, 0)) {\n\t\t\tv = this.copyV3(1);\n\t\t} else {\n\t\t\tv = this.copyV3(l - 1);\n\t\t}\n\t\tthis.next.push(v[0], v[1], v[2]);\n\t\tthis.next.push(v[0], v[1], v[2]);\n\n\t\tfor (var j = 0; j < l - 1; j++) {\n\t\t\tvar n = j * 2;\n\t\t\tthis.indices_array.push(n, n + 1, n + 2);\n\t\t\tthis.indices_array.push(n + 2, n + 1, n + 3);\n\t\t}\n\t\tif (!this._attributes) {\n\t\t\tthis._attributes = {\n\t\t\t\tposition: new THREE.BufferAttribute(\n\t\t\t\t\tnew Float32Array(this.positions),\n\t\t\t\t\t3\n\t\t\t\t),\n\t\t\t\tprevious: new THREE.BufferAttribute(\n\t\t\t\t\tnew Float32Array(this.previous),\n\t\t\t\t\t3\n\t\t\t\t),\n\t\t\t\tnext: new THREE.BufferAttribute(new Float32Array(this.next), 3),\n\t\t\t\tside: new THREE.BufferAttribute(new Float32Array(this.side), 1),\n\t\t\t\twidth: new THREE.BufferAttribute(\n\t\t\t\t\tnew Float32Array(this.width),\n\t\t\t\t\t1\n\t\t\t\t),\n\t\t\t\tuv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\n\t\t\t\tindex: new THREE.BufferAttribute(\n\t\t\t\t\tnew Uint16Array(this.indices_array),\n\t\t\t\t\t1\n\t\t\t\t),\n\t\t\t\tcounters: new THREE.BufferAttribute(\n\t\t\t\t\tnew Float32Array(this.counters),\n\t\t\t\t\t1\n\t\t\t\t)\n\t\t\t};\n\t\t} else {\n\t\t\tthis._attributes.position.copyArray(\n\t\t\t\tnew Float32Array(this.positions)\n\t\t\t);\n\t\t\tthis._attributes.position.needsUpdate = true;\n\t\t\tthis._attributes.previous.copyArray(\n\t\t\t\tnew Float32Array(this.previous)\n\t\t\t);\n\t\t\tthis._attributes.previous.needsUpdate = true;\n\t\t\tthis._attributes.next.copyArray(new Float32Array(this.next));\n\t\t\tthis._attributes.next.needsUpdate = true;\n\t\t\tthis._attributes.side.copyArray(new Float32Array(this.side));\n\t\t\tthis._attributes.side.needsUpdate = true;\n\t\t\tthis._attributes.width.copyArray(new Float32Array(this.width));\n\t\t\tthis._attributes.width.needsUpdate = true;\n\t\t\tthis._attributes.uv.copyArray(new Float32Array(this.uvs));\n\t\t\tthis._attributes.uv.needsUpdate = true;\n\t\t\tthis._attributes.index.copyArray(\n\t\t\t\tnew Uint16Array(this.indices_array)\n\t\t\t);\n\t\t\tthis._attributes.index.needsUpdate = true;\n\t\t}\n\n\t\tthis.addAttribute(\"position\", this._attributes.position);\n\t\tthis.addAttribute(\"previous\", this._attributes.previous);\n\t\tthis.addAttribute(\"next\", this._attributes.next);\n\t\tthis.addAttribute(\"side\", this._attributes.side);\n\t\tthis.addAttribute(\"width\", this._attributes.width);\n\t\tthis.addAttribute(\"uv\", this._attributes.uv);\n\t\tthis.addAttribute(\"counters\", this._attributes.counters);\n\n\t\tthis.setIndex(this._attributes.index);\n\n\t\tthis.computeBoundingSphere();\n\t\tthis.computeBoundingBox();\n\t};\n\n\tfunction memcpy(src, srcOffset, dst, dstOffset, length) {\n\t\tvar i;\n\n\t\tsrc = src.subarray || src.slice ? src : src.buffer;\n\t\tdst = dst.subarray || dst.slice ? dst : dst.buffer;\n\n\t\tsrc = srcOffset\n\t\t\t? src.subarray\n\t\t\t\t? src.subarray(srcOffset, length && srcOffset + length)\n\t\t\t\t: src.slice(srcOffset, length && srcOffset + length)\n\t\t\t: src;\n\n\t\tif (dst.set) {\n\t\t\tdst.set(src, dstOffset);\n\t\t} else {\n\t\t\tfor (i = 0; i < src.length; i++) {\n\t\t\t\tdst[i + dstOffset] = src[i];\n\t\t\t}\n\t\t}\n\n\t\treturn dst;\n\t}\n\n\t/**\n\t * Fast method to advance the line by one position.  The oldest position is removed.\n\t * @param position\n\t */\n\tMeshLine.prototype.advance = function(position) {\n\t\tvar positions = this._attributes.position.array;\n\t\tvar previous = this._attributes.previous.array;\n\t\tvar next = this._attributes.next.array;\n\t\tvar l = positions.length;\n\n\t\t// PREVIOUS\n\t\tmemcpy(positions, 0, previous, 0, l);\n\n\t\t// POSITIONS\n\t\tmemcpy(positions, 6, positions, 0, l - 6);\n\n\t\tpositions[l - 6] = position.x;\n\t\tpositions[l - 5] = position.y;\n\t\tpositions[l - 4] = position.z;\n\t\tpositions[l - 3] = position.x;\n\t\tpositions[l - 2] = position.y;\n\t\tpositions[l - 1] = position.z;\n\n\t\t// NEXT\n\t\tmemcpy(positions, 6, next, 0, l - 6);\n\n\t\tnext[l - 6] = position.x;\n\t\tnext[l - 5] = position.y;\n\t\tnext[l - 4] = position.z;\n\t\tnext[l - 3] = position.x;\n\t\tnext[l - 2] = position.y;\n\t\tnext[l - 1] = position.z;\n\n\t\tthis._attributes.position.needsUpdate = true;\n\t\tthis._attributes.previous.needsUpdate = true;\n\t\tthis._attributes.next.needsUpdate = true;\n\t};\n\n\tTHREE.ShaderChunk[\"meshline_vert\"] = [\n\t\t\"\",\n\t\tTHREE.ShaderChunk.logdepthbuf_pars_vertex,\n\t\tTHREE.ShaderChunk.fog_pars_vertex,\n\t\t\"\",\n\t\t\"attribute vec3 previous;\",\n\t\t\"attribute vec3 next;\",\n\t\t\"attribute float side;\",\n\t\t\"attribute float width;\",\n\t\t\"attribute float counters;\",\n\t\t\"\",\n\t\t\"uniform vec2 resolution;\",\n\t\t\"uniform float lineWidth;\",\n\t\t\"uniform vec3 color;\",\n\t\t\"uniform float opacity;\",\n\t\t\"uniform float near;\",\n\t\t\"uniform float far;\",\n\t\t\"uniform float sizeAttenuation;\",\n\t\t\"\",\n\t\t\"varying vec2 vUV;\",\n\t\t\"varying vec4 vColor;\",\n\t\t\"varying float vCounters;\",\n\t\t\"\",\n\t\t\"vec2 fix( vec4 i, float aspect ) {\",\n\t\t\"\",\n\t\t\"    vec2 res = i.xy / i.w;\",\n\t\t\"    res.x *= aspect;\",\n\t\t\"\t vCounters = counters;\",\n\t\t\"    return res;\",\n\t\t\"\",\n\t\t\"}\",\n\t\t\"\",\n\t\t\"void main() {\",\n\t\t\"\",\n\t\t\"    float aspect = resolution.x / resolution.y;\",\n\t\t\"\",\n\t\t\"    vColor = vec4( color, opacity );\",\n\t\t\"    vUV = uv;\",\n\t\t\"\",\n\t\t\"    mat4 m = projectionMatrix * modelViewMatrix;\",\n\t\t\"    vec4 finalPosition = m * vec4( position, 1.0 );\",\n\t\t\"    vec4 prevPos = m * vec4( previous, 1.0 );\",\n\t\t\"    vec4 nextPos = m * vec4( next, 1.0 );\",\n\t\t\"\",\n\t\t\"    vec2 currentP = fix( finalPosition, aspect );\",\n\t\t\"    vec2 prevP = fix( prevPos, aspect );\",\n\t\t\"    vec2 nextP = fix( nextPos, aspect );\",\n\t\t\"\",\n\t\t\"    float w = lineWidth * width;\",\n\t\t\"\",\n\t\t\"    vec2 dir;\",\n\t\t\"    if( nextP == currentP ) dir = normalize( currentP - prevP );\",\n\t\t\"    else if( prevP == currentP ) dir = normalize( nextP - currentP );\",\n\t\t\"    else {\",\n\t\t\"        vec2 dir1 = normalize( currentP - prevP );\",\n\t\t\"        vec2 dir2 = normalize( nextP - currentP );\",\n\t\t\"        dir = normalize( dir1 + dir2 );\",\n\t\t\"\",\n\t\t\"        vec2 perp = vec2( -dir1.y, dir1.x );\",\n\t\t\"        vec2 miter = vec2( -dir.y, dir.x );\",\n\t\t\"        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );\",\n\t\t\"\",\n\t\t\"    }\",\n\t\t\"\",\n\t\t\"    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;\",\n\t\t\"    vec4 normal = vec4( -dir.y, dir.x, 0., 1. );\",\n\t\t\"    normal.xy *= .5 * w;\",\n\t\t\"    normal *= projectionMatrix;\",\n\t\t\"    if( sizeAttenuation == 0. ) {\",\n\t\t\"        normal.xy *= finalPosition.w;\",\n\t\t\"        normal.xy /= ( vec4( resolution, 0., 1. ) * projectionMatrix ).xy;\",\n\t\t\"    }\",\n\t\t\"\",\n\t\t\"    vec4 offset = vec4( normal.xy * side, 0.0, 1.0 );\",\n\t\t\"    finalPosition.xy += offset.xy;\",\n\t\t\"\",\n\t\t\"    gl_Position = finalPosition;\",\n\t\t\"\",\n\t\tTHREE.ShaderChunk.logdepthbuf_vertex,\n\t\tTHREE.ShaderChunk.fog_vertex &&\n\t\t\t\"    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n\t\tTHREE.ShaderChunk.fog_vertex,\n\t\t\"}\"\n\t].join(\"\\r\\n\");\n\n\tTHREE.ShaderChunk[\"meshline_frag\"] = [\n\t\t\"\",\n\t\tTHREE.ShaderChunk.fog_pars_fragment,\n\t\tTHREE.ShaderChunk.logdepthbuf_pars_fragment,\n\t\t\"\",\n\t\t\"uniform sampler2D map;\",\n\t\t\"uniform sampler2D alphaMap;\",\n\t\t\"uniform float useMap;\",\n\t\t\"uniform float useAlphaMap;\",\n\t\t\"uniform float useDash;\",\n\t\t\"uniform float dashArray;\",\n\t\t\"uniform float dashOffset;\",\n\t\t\"uniform float dashRatio;\",\n\t\t\"uniform float visibility;\",\n\t\t\"uniform float alphaTest;\",\n\t\t\"uniform vec2 repeat;\",\n\t\t\"\",\n\t\t\"varying vec2 vUV;\",\n\t\t\"varying vec4 vColor;\",\n\t\t\"varying float vCounters;\",\n\t\t\"\",\n\t\t\"void main() {\",\n\t\t\"\",\n\t\tTHREE.ShaderChunk.logdepthbuf_fragment,\n\t\t\"\",\n\t\t\"    vec4 c = vColor;\",\n\t\t\"    if( useMap == 1. ) c *= texture2D( map, vUV * repeat );\",\n\t\t\"    if( useAlphaMap == 1. ) c.a *= texture2D( alphaMap, vUV * repeat ).a;\",\n\t\t\"    if( c.a < alphaTest ) discard;\",\n\t\t\"    if( useDash == 1. ){\",\n\t\t\"        c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));\",\n\t\t\"    }\",\n\t\t\"    gl_FragColor = c;\",\n\t\t\"    gl_FragColor.a *= step(vCounters, visibility);\",\n\t\t\"\",\n\t\tTHREE.ShaderChunk.fog_fragment,\n\t\t\"}\"\n\t].join(\"\\r\\n\");\n\n\tfunction MeshLineMaterial(parameters) {\n\t\tTHREE.ShaderMaterial.call(this, {\n\t\t\tuniforms: Object.assign({}, THREE.UniformsLib.fog, {\n\t\t\t\tlineWidth: { value: 1 },\n\t\t\t\tmap: { value: null },\n\t\t\t\tuseMap: { value: 0 },\n\t\t\t\talphaMap: { value: null },\n\t\t\t\tuseAlphaMap: { value: 0 },\n\t\t\t\tcolor: { value: new THREE.Color(0xffffff) },\n\t\t\t\topacity: { value: 1 },\n\t\t\t\tresolution: { value: new THREE.Vector2(1, 1) },\n\t\t\t\tsizeAttenuation: { value: 1 },\n\t\t\t\tnear: { value: 1 },\n\t\t\t\tfar: { value: 1 },\n\t\t\t\tdashArray: { value: 0 },\n\t\t\t\tdashOffset: { value: 0 },\n\t\t\t\tdashRatio: { value: 0.5 },\n\t\t\t\tuseDash: { value: 0 },\n\t\t\t\tvisibility: { value: 1 },\n\t\t\t\talphaTest: { value: 0 },\n\t\t\t\trepeat: { value: new THREE.Vector2(1, 1) }\n\t\t\t}),\n\n\t\t\tvertexShader: THREE.ShaderChunk.meshline_vert,\n\n\t\t\tfragmentShader: THREE.ShaderChunk.meshline_frag\n\t\t});\n\n\t\tthis.type = \"MeshLineMaterial\";\n\n\t\tObject.defineProperties(this, {\n\t\t\tlineWidth: {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.uniforms.lineWidth.value;\n\t\t\t\t},\n\t\t\t\tset: function(value) {\n\t\t\t\t\tthis.uniforms.lineWidth.value = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.uniforms.map.value;\n\t\t\t\t},\n\t\t\t\tset: function(value) {\n\t\t\t\t\tthis.uniforms.map.value = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tuseMap: {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.uniforms.useMap.value;\n\t\t\t\t},\n\t\t\t\tset: function(value) {\n\t\t\t\t\tthis.uniforms.useMap.value = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.uniforms.alphaMap.value;\n\t\t\t\t},\n\t\t\t\tset: function(value) {\n\t\t\t\t\tthis.uniforms.alphaMap.value = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tuseAlphaMap: {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.uniforms.useAlphaMap.value;\n\t\t\t\t},\n\t\t\t\tset: function(value) {\n\t\t\t\t\tthis.uniforms.useAlphaMap.value = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tcolor: {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.uniforms.color.value;\n\t\t\t\t},\n\t\t\t\tset: function(value) {\n\t\t\t\t\tthis.uniforms.color.value = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.uniforms.opacity.value;\n\t\t\t\t},\n\t\t\t\tset: function(value) {\n\t\t\t\t\tthis.uniforms.opacity.value = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tresolution: {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.uniforms.resolution.value;\n\t\t\t\t},\n\t\t\t\tset: function(value) {\n\t\t\t\t\tthis.uniforms.resolution.value.copy(value);\n\t\t\t\t}\n\t\t\t},\n\t\t\tsizeAttenuation: {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.uniforms.sizeAttenuation.value;\n\t\t\t\t},\n\t\t\t\tset: function(value) {\n\t\t\t\t\tthis.uniforms.sizeAttenuation.value = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tnear: {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.uniforms.near.value;\n\t\t\t\t},\n\t\t\t\tset: function(value) {\n\t\t\t\t\tthis.uniforms.near.value = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tfar: {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.uniforms.far.value;\n\t\t\t\t},\n\t\t\t\tset: function(value) {\n\t\t\t\t\tthis.uniforms.far.value = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdashArray: {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.uniforms.dashArray.value;\n\t\t\t\t},\n\t\t\t\tset: function(value) {\n\t\t\t\t\tthis.uniforms.dashArray.value = value;\n\t\t\t\t\tthis.useDash = value !== 0 ? 1 : 0;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdashOffset: {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.uniforms.dashOffset.value;\n\t\t\t\t},\n\t\t\t\tset: function(value) {\n\t\t\t\t\tthis.uniforms.dashOffset.value = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdashRatio: {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.uniforms.dashRatio.value;\n\t\t\t\t},\n\t\t\t\tset: function(value) {\n\t\t\t\t\tthis.uniforms.dashRatio.value = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tuseDash: {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.uniforms.useDash.value;\n\t\t\t\t},\n\t\t\t\tset: function(value) {\n\t\t\t\t\tthis.uniforms.useDash.value = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\tvisibility: {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.uniforms.visibility.value;\n\t\t\t\t},\n\t\t\t\tset: function(value) {\n\t\t\t\t\tthis.uniforms.visibility.value = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\talphaTest: {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.uniforms.alphaTest.value;\n\t\t\t\t},\n\t\t\t\tset: function(value) {\n\t\t\t\t\tthis.uniforms.alphaTest.value = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\trepeat: {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.uniforms.repeat.value;\n\t\t\t\t},\n\t\t\t\tset: function(value) {\n\t\t\t\t\tthis.uniforms.repeat.value.copy(value);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshLineMaterial.prototype = Object.create(THREE.ShaderMaterial.prototype);\n\tMeshLineMaterial.prototype.constructor = MeshLineMaterial;\n\tMeshLineMaterial.prototype.isMeshLineMaterial = true;\n\n\tMeshLineMaterial.prototype.copy = function(source) {\n\t\tTHREE.ShaderMaterial.prototype.copy.call(this, source);\n\n\t\tthis.lineWidth = source.lineWidth;\n\t\tthis.map = source.map;\n\t\tthis.useMap = source.useMap;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.useAlphaMap = source.useAlphaMap;\n\t\tthis.color.copy(source.color);\n\t\tthis.opacity = source.opacity;\n\t\tthis.resolution.copy(source.resolution);\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\t\tthis.dashArray.copy(source.dashArray);\n\t\tthis.dashOffset.copy(source.dashOffset);\n\t\tthis.dashRatio.copy(source.dashRatio);\n\t\tthis.useDash = source.useDash;\n\t\tthis.visibility = source.visibility;\n\t\tthis.alphaTest = source.alphaTest;\n\t\tthis.repeat.copy(source.repeat);\n\n\t\treturn this;\n\t};\n\n\tif (typeof exports !== \"undefined\") {\n\t\tif (typeof module !== \"undefined\" && module.exports) {\n\t\t\texports = module.exports = {\n\t\t\t\tMeshLine: MeshLine,\n\t\t\t\tMeshLineMaterial: MeshLineMaterial,\n\t\t\t\tMeshLineRaycast: MeshLineRaycast\n\t\t\t};\n\t\t}\n\t\texports.MeshLine = MeshLine;\n\t\texports.MeshLineMaterial = MeshLineMaterial;\n\t\texports.MeshLineRaycast = MeshLineRaycast;\n\t} else {\n\t\troot.MeshLine = MeshLine;\n\t\troot.MeshLineMaterial = MeshLineMaterial;\n\t\troot.MeshLineRaycast = MeshLineRaycast;\n\t}\n}.call(this));\n"]},"metadata":{},"sourceType":"script"}