{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adrie\\\\Downloads\\\\react-three-fiber-threejs-meshline-example-forked\\\\src\\\\index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport { render } from 'react-dom';\nimport React, { useMemo, useRef } from 'react';\nimport * as THREE from 'three';\nimport * as meshline from 'threejs-meshline';\nimport { extend, Canvas, useFrame, useThree } from 'react-three-fiber';\nimport './styles.css';\nextend(meshline);\n\nconst Array2THREEVector3 = points => {\n  return points.map(value3D => new THREE.Vector3(value3D[0], value3D[1], value3D[2]));\n};\n\n_c = Array2THREEVector3;\nconst points = [[-10, 0, 0], [0, 10, 10], [10, 0, 0]];\nconst points2 = [new THREE.Vector3(-10, 0, 0), new THREE.Vector3(0, 10, 10), new THREE.Vector3(10, 0, 0)];\nconst points1 = Array2THREEVector3(points);\nconsole.log(points1);\nconsole.log(points2);\nconsole.log(points2 == points1);\n\nconst AngularLine = ({\n  id,\n  points,\n  width,\n  color\n}) => {\n  _s();\n\n  const material = useRef();\n  const newPoints = Array2THREEVector3(points);\n  const curve = new THREE.CatmullRomCurve3(newPoints).getPoints(1000);\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"meshLine\", {\n    attach: \"geometry\",\n    vertices: curve,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"meshLineMaterial\", {\n    attach: \"material\",\n    ref: material,\n    lineWidth: width,\n    color: color,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(AngularLine, \"wuWoyjGUCnHvL9b5MDyaA3/i5yQ=\");\n\n_c2 = AngularLine;\n\nfunction Fatline({\n  curve,\n  width,\n  color,\n  speed\n}) {\n  _s2();\n\n  const material = useRef();\n  useFrame(() => material.current.uniforms.dashOffset.value -= speed);\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"meshLine\", {\n    attach: \"geometry\",\n    vertices: curve,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"meshLineMaterial\", {\n    attach: \"material\",\n    ref: material,\n    transparent: true,\n    depthTest: false,\n    lineWidth: width,\n    color: color,\n    dashArray: 0.1,\n    dashRatio: 0.9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s2(Fatline, \"gbLAKoFLni0JhxVZtBUE06R4M0U=\", false, function () {\n  return [useFrame];\n});\n\n_c3 = Fatline;\n\nfunction Lines({\n  count,\n  colors\n}) {\n  _s3();\n\n  const lines = useMemo(() => new Array(count).fill().map(() => {\n    const pos = new THREE.Vector3(10 - Math.random() * 20, 10 - Math.random() * 20, 10 - Math.random() * 20);\n    const points = new Array(30).fill().map(() => pos.add(new THREE.Vector3(4 - Math.random() * 8, 4 - Math.random() * 8, 2 - Math.random() * 4)).clone());\n    const curve = new THREE.CatmullRomCurve3(points).getPoints(1000);\n    return {\n      color: colors[parseInt(colors.length * Math.random())],\n      width: Math.min(0.1, 0.5 * Math.random()),\n      speed: Math.min(0.001, 0.0005 * Math.random()),\n      curve\n    };\n  }), [colors, count]);\n  return lines.map((props, index) => /*#__PURE__*/React.createElement(Fatline, Object.assign({\n    key: index\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 38\n    }\n  })));\n}\n\n_s3(Lines, \"y4EXgIXkKUBV6QgFbGFB1cu0o9w=\");\n\n_c4 = Lines;\n\nfunction Rig({\n  mouse\n}) {\n  _s4();\n\n  const _useThree = useThree(),\n        camera = _useThree.camera;\n\n  useFrame(() => {\n    camera.position.x += (mouse.current[0] / 50 - camera.position.x) * 0.05;\n    camera.position.y += (-mouse.current[1] / 50 - camera.position.y) * 0.05;\n    camera.lookAt(0, 0, 0);\n  });\n  return null;\n}\n\n_s4(Rig, \"K6LkdZnP8OJ6UK0tVtTtxiafG3Y=\", false, function () {\n  return [useThree, useFrame];\n});\n\n_c5 = Rig;\n\nfunction App() {\n  _s5();\n\n  const mouse = useRef([0, 0]);\n  return /*#__PURE__*/React.createElement(Canvas, {\n    camera: {\n      position: [0, 0, 45],\n      fov: 25\n    },\n    onMouseMove: e => mouse.current = [e.clientX - window.innerWidth / 2, e.clientY - window.innerHeight / 2],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Lines, {\n    count: 40,\n    colors: ['#A2CCB6', '#FCEEB5', '#EE786E', '#e0feff', 'lightpink', 'lightblue'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(AngularLine, {\n    id: 1,\n    points: points,\n    width: 0.1,\n    color: \"blue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Rig, {\n    mouse: mouse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s5(App, \"b0kTJvbZf1b4lnfrhMQhcqKGWvs=\");\n\n_c6 = App;\nrender( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 8\n  }\n}), document.querySelector('#root'));\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"Array2THREEVector3\");\n$RefreshReg$(_c2, \"AngularLine\");\n$RefreshReg$(_c3, \"Fatline\");\n$RefreshReg$(_c4, \"Lines\");\n$RefreshReg$(_c5, \"Rig\");\n$RefreshReg$(_c6, \"App\");","map":{"version":3,"sources":["C:/Users/adrie/Downloads/react-three-fiber-threejs-meshline-example-forked/src/index.js"],"names":["render","React","useMemo","useRef","THREE","meshline","extend","Canvas","useFrame","useThree","Array2THREEVector3","points","map","value3D","Vector3","points2","points1","console","log","AngularLine","id","width","color","material","newPoints","curve","CatmullRomCurve3","getPoints","Fatline","speed","current","uniforms","dashOffset","value","Lines","count","colors","lines","Array","fill","pos","Math","random","add","clone","parseInt","length","min","props","index","Rig","mouse","camera","position","x","y","lookAt","App","fov","e","clientX","window","innerWidth","clientY","innerHeight","document","querySelector"],"mappings":"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","sourcesContent":["import { render } from 'react-dom'\nimport React, { useMemo, useRef } from 'react'\nimport * as THREE from 'three'\nimport * as meshline from 'threejs-meshline'\nimport { extend, Canvas, useFrame, useThree } from 'react-three-fiber'\nimport './styles.css'\n\nextend(meshline)\n\nconst Array2THREEVector3 = (points) => {\n  return (points.map(value3D => new THREE.Vector3(value3D[0], value3D[1], value3D[2])))\n};\n\nconst points = [\n  [-10, 0, 0],\n  [0, 10, 10],\n  [10, 0, 0]\n];\nconst points2 = [\n  new THREE.Vector3(-10, 0, 0),\n  new THREE.Vector3(0, 10, 10),\n  new THREE.Vector3(10, 0, 0)\n];\nconst points1 = Array2THREEVector3(points);\nconsole.log(points1);\nconsole.log(points2);\nconsole.log(points2 == points1);\n\nconst AngularLine = ({id, points, width, color}) => {\n  const material = useRef();\n  const newPoints = Array2THREEVector3(points);\n  const curve = new THREE.CatmullRomCurve3(newPoints).getPoints(1000);\n  return (\n    <mesh>\n      <meshLine attach=\"geometry\" vertices={curve} />\n      <meshLineMaterial attach=\"material\" ref={material} lineWidth={width} color={color} />\n    </mesh>\n  )\n}\n\n\n\nfunction Fatline({ curve, width, color, speed }) {\n  const material = useRef()\n  useFrame(() => (material.current.uniforms.dashOffset.value -= speed))\n  return (\n    <mesh>\n      <meshLine attach=\"geometry\" vertices={curve} />\n      <meshLineMaterial attach=\"material\" ref={material} transparent depthTest={false} lineWidth={width} color={color} dashArray={0.1} dashRatio={0.9} />\n    </mesh>\n  )\n}\n\nfunction Lines({ count, colors }) {\n  const lines = useMemo(\n    () =>\n      new Array(count).fill().map(() => {\n        const pos = new THREE.Vector3(10 - Math.random() * 20, 10 - Math.random() * 20, 10 - Math.random() * 20)\n        const points = new Array(30).fill().map(() => pos.add(new THREE.Vector3(4 - Math.random() * 8, 4 - Math.random() * 8, 2 - Math.random() * 4)).clone())\n        const curve = new THREE.CatmullRomCurve3(points).getPoints(1000)\n        return {\n          color: colors[parseInt(colors.length * Math.random())],\n          width: Math.min(0.1, 0.5 * Math.random()),\n          speed: Math.min(0.001, 0.0005 * Math.random()),\n          curve\n        }\n      }),\n    [colors, count]\n  )\n  return lines.map((props, index) => <Fatline key={index} {...props} />)\n}\n\nfunction Rig({ mouse }) {\n  const { camera } = useThree()\n  useFrame(() => {\n    camera.position.x += (mouse.current[0] / 50 - camera.position.x) * 0.05\n    camera.position.y += (-mouse.current[1] / 50 - camera.position.y) * 0.05\n    camera.lookAt(0, 0, 0)\n  })\n  return null\n}\n\nfunction App() {\n  const mouse = useRef([0, 0])\n  return (\n    <Canvas\n      camera={{ position: [0, 0, 45], fov: 25 }}\n      onMouseMove={(e) => (mouse.current = [e.clientX - window.innerWidth / 2, e.clientY - window.innerHeight / 2])}>\n      <Lines count={40} colors={['#A2CCB6', '#FCEEB5', '#EE786E', '#e0feff', 'lightpink', 'lightblue']} />\n      <AngularLine id={1} points={points} width={0.1} color={\"blue\"} />\n      <Rig mouse={mouse} />\n    </Canvas>\n  )\n}\n\nrender(<App />, document.querySelector('#root'))\n"]},"metadata":{},"sourceType":"module"}