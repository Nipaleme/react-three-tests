{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adrie\\\\Downloads\\\\react-three-fiber-threejs-meshline-example-forked\\\\src\\\\index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$();\n\nimport { render } from 'react-dom';\nimport React, { useMemo, useRef, useState } from 'react';\nimport * as THREE from 'three';\nimport * as meshline from 'threejs-meshline';\nimport { extend, Canvas, useFrame, useThree } from 'react-three-fiber';\nimport './styles.css';\nimport { EllipseCurve } from 'three';\nextend(meshline);\n\nconst Array2THREEVector3 = points => {\n  return points.map(value3D => new THREE.Vector3(value3D[0], value3D[1], value3D[2]));\n};\n\n_c = Array2THREEVector3;\nconst points = [[-10, 0, 0], [0, 5, 0], [10, 0, 0], [5, -4, 2], [-5, -2, -10]];\nconst ellipse = {\n  aX: 0,\n  aY: 0,\n  xRadius: 2,\n  yRadius: 2,\n  aStartAngle: 0,\n  aEndAngle: 90 * Math.PI / 180,\n  aClockwise: true,\n  aRotation: 0\n}; // const Cube = (props) => {\n//   const mesh = useRef()\n//   // useFrame(() => {\n//   //   mesh.current.rotation.x = mesh.current.rotation.y += 0.01\n//   // })\n//   console.log(props)\n//   return (\n//     <mesh>\n//       {/* {...props} */}\n//       ref={mesh}\n//       <boxBufferGeometry props={[1, 1, 1]} />\n//       <meshStandardMaterial color={'orange'} />\n//     </mesh>\n//   )\n// }\n\nfunction Ellipse(props) {\n  _s();\n\n  console.log(props);\n  const geometry = useMemo(() => {\n    const n = props.props;\n    const _ref = [n.aX, n.aY, n.xRadius, n.yRadius, n.aStartAngle, n.aEndAngle, n.aClockwise, n.aRotation],\n          aX = _ref[0],\n          aY = _ref[1],\n          xRadius = _ref[2],\n          yRadius = _ref[3],\n          aStartAngle = _ref[4],\n          aEndAngle = _ref[5],\n          aClockwisz = _ref[6],\n          aRotation = _ref[7];\n    const curve = new THREE.EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwisz, aRotation);\n    const points = curve.getPoints(50);\n    return new THREE.BufferGeometry().setFromPoints(points);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"line\", Object.assign({\n    geometry: geometry\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    attach: \"material\",\n    color: \"black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }));\n} // const Curve = ({id, ellipse, width, color}) => {\n//   const material = useRef();\n//   const [center, radius, angle] = [ellipse.center, ellipse.radius, ellipse.angle];\n//   const curve = new THREE.EllipseCurve(\n//     center.x, center.y,\n//     1, 2,\n//     angle.start*Math.PI/180, angle.end*Math.PI/180,\n//     false,\n//     0).getPoints(50);\n//   return (\n//     <mesh>\n//       <meshLine attach=\"geometry\" vertices={curve} />\n//       <meshLineMaterial attach=\"material\" ref={material} lineWidth={width} color={color} />\n//     </mesh>\n//   )\n// };\n\n\n_s(Ellipse, \"02hlve5eMynmluEywvGvnlLCucU=\");\n\n_c2 = Ellipse;\n\nconst SmoothLine = ({\n  id,\n  points,\n  width,\n  color\n}) => {\n  _s2();\n\n  const material = useRef();\n  const curve = new THREE.CatmullRomCurve3(Array2THREEVector3(points)).getPoints(1000);\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"meshLine\", {\n    attach: \"geometry\",\n    vertices: curve,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"meshLineMaterial\", {\n    attach: \"material\",\n    ref: material,\n    lineWidth: width,\n    color: color,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s2(SmoothLine, \"wuWoyjGUCnHvL9b5MDyaA3/i5yQ=\");\n\n_c3 = SmoothLine;\n\nconst AngularLine = ({\n  id,\n  points,\n  width,\n  color\n}) => {\n  _s3();\n\n  const material = useRef();\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"meshLine\", {\n    attach: \"geometry\",\n    vertices: Array2THREEVector3(points),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"meshLineMaterial\", {\n    attach: \"material\",\n    ref: material,\n    lineWidth: width,\n    color: color,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s3(AngularLine, \"wuWoyjGUCnHvL9b5MDyaA3/i5yQ=\");\n\n_c4 = AngularLine;\n\nfunction Fatline({\n  curve,\n  width,\n  color,\n  speed\n}) {\n  _s4();\n\n  const material = useRef();\n  useFrame(() => material.current.uniforms.dashOffset.value -= speed);\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"meshLine\", {\n    attach: \"geometry\",\n    vertices: curve,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"meshLineMaterial\", {\n    attach: \"material\",\n    ref: material,\n    transparent: true,\n    depthTest: false,\n    lineWidth: width,\n    color: color,\n    dashArray: 0.1,\n    dashRatio: 0.9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s4(Fatline, \"gbLAKoFLni0JhxVZtBUE06R4M0U=\", false, function () {\n  return [useFrame];\n});\n\n_c5 = Fatline;\n\nfunction Lines({\n  count,\n  colors\n}) {\n  _s5();\n\n  const lines = useMemo(() => new Array(count).fill().map(() => {\n    const pos = new THREE.Vector3(10 - Math.random() * 20, 10 - Math.random() * 20, 10 - Math.random() * 20);\n    const points = new Array(30).fill().map(() => pos.add(new THREE.Vector3(4 - Math.random() * 8, 4 - Math.random() * 8, 2 - Math.random() * 4)).clone());\n    const curve = new THREE.CatmullRomCurve3(points).getPoints(1000);\n    return {\n      color: colors[parseInt(colors.length * Math.random())],\n      width: Math.min(0.1, 0.5 * Math.random()),\n      speed: Math.min(0.001, 0.0005 * Math.random()),\n      curve\n    };\n  }), [colors, count]);\n  return lines.map((props, index) => /*#__PURE__*/React.createElement(Fatline, Object.assign({\n    key: index\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 38\n    }\n  })));\n}\n\n_s5(Lines, \"y4EXgIXkKUBV6QgFbGFB1cu0o9w=\");\n\n_c6 = Lines;\n\nfunction Rig({\n  mouse\n}) {\n  _s6();\n\n  const _useThree = useThree(),\n        camera = _useThree.camera;\n\n  useFrame(() => {\n    camera.position.x += (mouse.current[0] / 25 - camera.position.x) * 0.5;\n    camera.position.y += (-mouse.current[1] / 25 - camera.position.y) * 0.5;\n    camera.lookAt(0, 0, 0);\n  });\n  return null;\n}\n\n_s6(Rig, \"K6LkdZnP8OJ6UK0tVtTtxiafG3Y=\", false, function () {\n  return [useThree, useFrame];\n});\n\n_c7 = Rig;\n\nconst Box = ({\n  position,\n  color\n}) => {\n  _s7();\n\n  const ref = useRef();\n  useFrame(() => ref.current.rotation.x = ref.current.rotation.y += 0.01);\n  const newcolor = color;\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    position: position,\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"boxBufferGeometry\", {\n    args: [1, 1, 1],\n    attach: \"geometry\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"meshPhongMaterial\", {\n    color: newcolor,\n    attach: \"material\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s7(Box, \"8QVLrcMdYxPUkj6ry5zpyt6J6X8=\", false, function () {\n  return [useFrame];\n});\n\n_c8 = Box;\n\nfunction App() {\n  _s8();\n\n  const mouse = useRef([0, 0]);\n  return /*#__PURE__*/React.createElement(Canvas, {\n    camera: {\n      position: [0, 0, 45],\n      fov: 25\n    },\n    onMouseMove: e => mouse.current = [e.clientX - window.innerWidth / 2, e.clientY - window.innerHeight / 2],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Lines, {\n    count: 40,\n    colors: ['#A2CCB6', '#FCEEB5', '#EE786E', '#e0feff', 'lightpink', 'lightblue'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(AngularLine, {\n    id: 1,\n    points: points,\n    width: 0.1,\n    color: \"blue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SmoothLine, {\n    id: 2,\n    points: points,\n    width: 0.05,\n    color: \"red\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Ellipse, {\n    props: ellipse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    position: [-1.2, 0, 0],\n    color: '#ffffff',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Rig, {\n    mouse: mouse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s8(App, \"b0kTJvbZf1b4lnfrhMQhcqKGWvs=\");\n\n_c9 = App;\nrender( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 8\n  }\n}), document.querySelector('#root'));\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n\n$RefreshReg$(_c, \"Array2THREEVector3\");\n$RefreshReg$(_c2, \"Ellipse\");\n$RefreshReg$(_c3, \"SmoothLine\");\n$RefreshReg$(_c4, \"AngularLine\");\n$RefreshReg$(_c5, \"Fatline\");\n$RefreshReg$(_c6, \"Lines\");\n$RefreshReg$(_c7, \"Rig\");\n$RefreshReg$(_c8, \"Box\");\n$RefreshReg$(_c9, \"App\");","map":{"version":3,"sources":["C:/Users/adrie/Downloads/react-three-fiber-threejs-meshline-example-forked/src/index.js"],"names":["render","React","useMemo","useRef","useState","THREE","meshline","extend","Canvas","useFrame","useThree","EllipseCurve","Array2THREEVector3","points","map","value3D","Vector3","ellipse","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","Math","PI","aClockwise","aRotation","Ellipse","props","console","log","geometry","n","aClockwisz","curve","getPoints","BufferGeometry","setFromPoints","SmoothLine","id","width","color","material","CatmullRomCurve3","AngularLine","Fatline","speed","current","uniforms","dashOffset","value","Lines","count","colors","lines","Array","fill","pos","random","add","clone","parseInt","length","min","index","Rig","mouse","camera","position","x","y","lookAt","Box","ref","rotation","newcolor","App","fov","e","clientX","window","innerWidth","clientY","innerHeight","document","querySelector"],"mappings":"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","sourcesContent":["import { render } from 'react-dom'\nimport React, { useMemo, useRef, useState } from 'react'\nimport * as THREE from 'three'\nimport * as meshline from 'threejs-meshline'\nimport { extend, Canvas, useFrame, useThree } from 'react-three-fiber'\nimport './styles.css'\nimport { EllipseCurve } from 'three'\n\nextend(meshline)\n\nconst Array2THREEVector3 = (points) => {\n  return (points.map(value3D => new THREE.Vector3(value3D[0], value3D[1], value3D[2])))\n};\n\nconst points = [\n  [-10, 0, 0],\n  [0, 5, 0],\n  [10, 0, 0],\n  [5,-4,2],\n  [-5, -2, -10]\n];\n\n\n\n\nconst ellipse = {\n  aX: 0,\n  aY: 0,\n  xRadius: 2,\n  yRadius: 2,\n  aStartAngle: 0,\n  aEndAngle: 90 * Math.PI / 180,\n  aClockwise: true,\n  aRotation: 0,\n}\n\n// const Cube = (props) => {\n//   const mesh = useRef()\n//   // useFrame(() => {\n//   //   mesh.current.rotation.x = mesh.current.rotation.y += 0.01\n//   // })\n//   console.log(props)\n//   return (\n//     <mesh>\n//       {/* {...props} */}\n//       ref={mesh}\n//       <boxBufferGeometry props={[1, 1, 1]} />\n//       <meshStandardMaterial color={'orange'} />\n//     </mesh>\n//   )\n// }\n\nfunction Ellipse(props) {\n  console.log(props)\n  const geometry = useMemo(() => {\n    const n = props.props;\n    const [aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwisz, aRotation] = [n.aX, n.aY, n.xRadius, n.yRadius, n.aStartAngle, n.aEndAngle, n.aClockwise, n.aRotation]\n    const curve = new THREE.EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwisz, aRotation)\n    const points = curve.getPoints(50)\n    return new THREE.BufferGeometry().setFromPoints(points)\n  }, [])\n  return (\n    <line geometry={geometry} {...props}>\n      <meshBasicMaterial attach=\"material\" color={\"black\"} />\n    </line>\n  )\n}\n\n// const Curve = ({id, ellipse, width, color}) => {\n//   const material = useRef();\n//   const [center, radius, angle] = [ellipse.center, ellipse.radius, ellipse.angle];\n//   const curve = new THREE.EllipseCurve(\n//     center.x, center.y,\n//     1, 2,\n//     angle.start*Math.PI/180, angle.end*Math.PI/180,\n//     false,\n//     0).getPoints(50);\n//   return (\n//     <mesh>\n//       <meshLine attach=\"geometry\" vertices={curve} />\n//       <meshLineMaterial attach=\"material\" ref={material} lineWidth={width} color={color} />\n//     </mesh>\n//   )\n// };\n\n\nconst SmoothLine = ({id, points, width, color}) => {\n  const material = useRef();\n  const curve = new THREE.CatmullRomCurve3(Array2THREEVector3(points)).getPoints(1000);\n  return (\n    <mesh>\n      <meshLine attach=\"geometry\" vertices={curve} />\n      <meshLineMaterial attach=\"material\" ref={material} lineWidth={width} color={color} />\n    </mesh>\n  )\n};\n\nconst AngularLine = ({id, points, width, color}) => {\n  const material = useRef();\n  return (\n    <mesh>\n      <meshLine attach=\"geometry\" vertices={Array2THREEVector3(points)} />\n      <meshLineMaterial attach=\"material\" ref={material} lineWidth={width} color={color} />\n    </mesh>\n  )\n};\n\n\n\nfunction Fatline({ curve, width, color, speed }) {\n  const material = useRef()\n  useFrame(() => (material.current.uniforms.dashOffset.value -= speed))\n  return (\n    <mesh>\n      <meshLine attach=\"geometry\" vertices={curve} />\n      <meshLineMaterial attach=\"material\" ref={material} transparent depthTest={false} lineWidth={width} color={color} dashArray={0.1} dashRatio={0.9} />\n    </mesh>\n  )\n}\n\nfunction Lines({ count, colors }) {\n  const lines = useMemo(\n    () =>\n      new Array(count).fill().map(() => {\n        const pos = new THREE.Vector3(10 - Math.random() * 20, 10 - Math.random() * 20, 10 - Math.random() * 20)\n        const points = new Array(30).fill().map(() => pos.add(new THREE.Vector3(4 - Math.random() * 8, 4 - Math.random() * 8, 2 - Math.random() * 4)).clone())\n        const curve = new THREE.CatmullRomCurve3(points).getPoints(1000)\n        return {\n          color: colors[parseInt(colors.length * Math.random())],\n          width: Math.min(0.1, 0.5 * Math.random()),\n          speed: Math.min(0.001, 0.0005 * Math.random()),\n          curve\n        }\n      }),\n    [colors, count]\n  )\n  return lines.map((props, index) => <Fatline key={index} {...props} />)\n}\n\nfunction Rig({ mouse }) {\n  const { camera } = useThree()\n  useFrame(() => {\n    camera.position.x += (mouse.current[0] / 25 - camera.position.x) * 0.5\n    camera.position.y += (-mouse.current[1] / 25 - camera.position.y) * 0.5\n    camera.lookAt(0, 0, 0)\n  })\n  return null\n}\n\nconst Box = ({position, color}) => {\n  const ref = useRef()\n  useFrame(() => (ref.current.rotation.x = ref.current.rotation.y += 0.01))\n  const newcolor = color\n  return (\n    <mesh position={position} ref={ref}>\n      <boxBufferGeometry args={[1, 1, 1]} attach=\"geometry\" />\n      <meshPhongMaterial color={newcolor} attach=\"material\" />\n    </mesh>\n  )\n}\n\nfunction App() {\n  const mouse = useRef([0, 0])\n  return (\n    <Canvas\n      camera={{ position: [0, 0, 45], fov: 25 }}\n      onMouseMove={(e) => (mouse.current = [e.clientX - window.innerWidth / 2, e.clientY - window.innerHeight / 2])}>\n      <Lines count={40} colors={['#A2CCB6', '#FCEEB5', '#EE786E', '#e0feff', 'lightpink', 'lightblue']} />\n      <AngularLine id={1} points={points} width={0.1} color={\"blue\"} />\n      <SmoothLine id={2} points={points} width={0.05} color={\"red\"} />\n      {/* <Curve id={3} ellipse={ellipse} width={0.1} color={\"yellow\"} /> */}\n      <Ellipse props={ellipse} />\n      <Box position={[-1.2, 0, 0]} color={'#ffffff'} />\n      <Rig mouse={mouse} />\n    </Canvas>\n  )\n}\n\nrender(<App />, document.querySelector('#root'))\n"]},"metadata":{},"sourceType":"module"}