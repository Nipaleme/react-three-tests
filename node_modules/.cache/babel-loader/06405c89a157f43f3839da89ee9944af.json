{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adrie\\\\Downloads\\\\react-three-fiber-threejs-meshline-example-forked\\\\src\\\\index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$();\n\nimport { render } from 'react-dom';\nimport React, { useMemo, useRef } from 'react';\nimport * as THREE from 'three';\nimport * as meshline from 'threejs-meshline';\nimport { extend, Canvas, useFrame, useThree } from 'react-three-fiber';\nimport './styles.css';\nimport { EllipseCurve } from 'three';\nextend(meshline);\n\nconst Array2THREEVector3 = points => {\n  return points.map(value3D => new THREE.Vector3(value3D[0], value3D[1], value3D[2]));\n};\n\n_c = Array2THREEVector3;\nconst points = [[-10, 0, 0], [0, 5, 0], [10, 0, 0]];\nconst ellipse = {\n  center: {\n    x: 0,\n    y: 0\n  },\n  radius: {\n    x: 5,\n    y: 5\n  },\n  angle: {\n    start: 0,\n    end: 90\n  }\n};\nconst ellipseArray = [0, 0, 5, 5, 0 * Math.PI / 180, 90 * Math.PI / 180, false, 0];\n\nfunction Ellipse(props, ellipse) {\n  _s();\n\n  const geometry = useMemo(() => {\n    // const [center, radius, angle] = [ellipse.center, ellipse.radius, ellipse.angle];\n    const curve = new EllipseCurve.apply(ellipseArray);\n    const points = curve.getPoints(50);\n    return new THREE.BufferGeometry().setFromPoints(points);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"line\", Object.assign({\n    geometry: geometry\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    attach: \"material\",\n    color: \"black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(Ellipse, \"02hlve5eMynmluEywvGvnlLCucU=\");\n\n_c2 = Ellipse;\n\nconst Curve = ({\n  id,\n  ellipse,\n  width,\n  color\n}) => {\n  _s2();\n\n  const material = useRef();\n  const _ref = [ellipse.center, ellipse.radius, ellipse.angle],\n        center = _ref[0],\n        radius = _ref[1],\n        angle = _ref[2];\n  const curve = new THREE.EllipseCurve(center.x, center.y, 1, 2, angle.start * Math.PI / 180, angle.end * Math.PI / 180, false, 0).getPoints(50);\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"meshLine\", {\n    attach: \"geometry\",\n    vertices: curve,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"meshLineMaterial\", {\n    attach: \"material\",\n    ref: material,\n    lineWidth: width,\n    color: color,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s2(Curve, \"wuWoyjGUCnHvL9b5MDyaA3/i5yQ=\");\n\n_c3 = Curve;\n\nconst SmoothLine = ({\n  id,\n  points,\n  width,\n  color\n}) => {\n  _s3();\n\n  const material = useRef();\n  const curve = new THREE.CatmullRomCurve3(Array2THREEVector3(points)).getPoints(1000);\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"meshLine\", {\n    attach: \"geometry\",\n    vertices: curve,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"meshLineMaterial\", {\n    attach: \"material\",\n    ref: material,\n    lineWidth: width,\n    color: color,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s3(SmoothLine, \"wuWoyjGUCnHvL9b5MDyaA3/i5yQ=\");\n\n_c4 = SmoothLine;\n\nconst AngularLine = ({\n  id,\n  points,\n  width,\n  color\n}) => {\n  _s4();\n\n  const material = useRef();\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"meshLine\", {\n    attach: \"geometry\",\n    vertices: Array2THREEVector3(points),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"meshLineMaterial\", {\n    attach: \"material\",\n    ref: material,\n    lineWidth: width,\n    color: color,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s4(AngularLine, \"wuWoyjGUCnHvL9b5MDyaA3/i5yQ=\");\n\n_c5 = AngularLine;\n\nfunction Fatline({\n  curve,\n  width,\n  color,\n  speed\n}) {\n  _s5();\n\n  const material = useRef();\n  useFrame(() => material.current.uniforms.dashOffset.value -= speed);\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"meshLine\", {\n    attach: \"geometry\",\n    vertices: curve,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"meshLineMaterial\", {\n    attach: \"material\",\n    ref: material,\n    transparent: true,\n    depthTest: false,\n    lineWidth: width,\n    color: color,\n    dashArray: 0.1,\n    dashRatio: 0.9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s5(Fatline, \"gbLAKoFLni0JhxVZtBUE06R4M0U=\", false, function () {\n  return [useFrame];\n});\n\n_c6 = Fatline;\n\nfunction Lines({\n  count,\n  colors\n}) {\n  _s6();\n\n  const lines = useMemo(() => new Array(count).fill().map(() => {\n    const pos = new THREE.Vector3(10 - Math.random() * 20, 10 - Math.random() * 20, 10 - Math.random() * 20);\n    const points = new Array(30).fill().map(() => pos.add(new THREE.Vector3(4 - Math.random() * 8, 4 - Math.random() * 8, 2 - Math.random() * 4)).clone());\n    const curve = new THREE.CatmullRomCurve3(points).getPoints(1000);\n    return {\n      color: colors[parseInt(colors.length * Math.random())],\n      width: Math.min(0.1, 0.5 * Math.random()),\n      speed: Math.min(0.001, 0.0005 * Math.random()),\n      curve\n    };\n  }), [colors, count]);\n  return lines.map((props, index) => /*#__PURE__*/React.createElement(Fatline, Object.assign({\n    key: index\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 38\n    }\n  })));\n}\n\n_s6(Lines, \"y4EXgIXkKUBV6QgFbGFB1cu0o9w=\");\n\n_c7 = Lines;\n\nfunction Rig({\n  mouse\n}) {\n  _s7();\n\n  const _useThree = useThree(),\n        camera = _useThree.camera;\n\n  useFrame(() => {\n    camera.position.x += (mouse.current[0] / 50 - camera.position.x) * 0.05;\n    camera.position.y += (-mouse.current[1] / 50 - camera.position.y) * 0.05;\n    camera.lookAt(0, 0, 0);\n  });\n  return null;\n}\n\n_s7(Rig, \"K6LkdZnP8OJ6UK0tVtTtxiafG3Y=\", false, function () {\n  return [useThree, useFrame];\n});\n\n_c8 = Rig;\n\nfunction App() {\n  _s8();\n\n  const mouse = useRef([0, 0]);\n  return /*#__PURE__*/React.createElement(Canvas, {\n    camera: {\n      position: [0, 0, 45],\n      fov: 25\n    },\n    onMouseMove: e => mouse.current = [e.clientX - window.innerWidth / 2, e.clientY - window.innerHeight / 2],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Lines, {\n    count: 40,\n    colors: ['#A2CCB6', '#FCEEB5', '#EE786E', '#e0feff', 'lightpink', 'lightblue'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(AngularLine, {\n    id: 1,\n    points: points,\n    width: 0.1,\n    color: \"blue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SmoothLine, {\n    id: 2,\n    points: points,\n    width: 0.05,\n    color: \"red\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Ellipse, {\n    ellipse: ellipseArray,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Rig, {\n    mouse: mouse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s8(App, \"b0kTJvbZf1b4lnfrhMQhcqKGWvs=\");\n\n_c9 = App;\nrender( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 8\n  }\n}), document.querySelector('#root'));\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n\n$RefreshReg$(_c, \"Array2THREEVector3\");\n$RefreshReg$(_c2, \"Ellipse\");\n$RefreshReg$(_c3, \"Curve\");\n$RefreshReg$(_c4, \"SmoothLine\");\n$RefreshReg$(_c5, \"AngularLine\");\n$RefreshReg$(_c6, \"Fatline\");\n$RefreshReg$(_c7, \"Lines\");\n$RefreshReg$(_c8, \"Rig\");\n$RefreshReg$(_c9, \"App\");","map":{"version":3,"sources":["C:/Users/adrie/Downloads/react-three-fiber-threejs-meshline-example-forked/src/index.js"],"names":["render","React","useMemo","useRef","THREE","meshline","extend","Canvas","useFrame","useThree","EllipseCurve","Array2THREEVector3","points","map","value3D","Vector3","ellipse","center","x","y","radius","angle","start","end","ellipseArray","Math","PI","Ellipse","props","geometry","curve","apply","getPoints","BufferGeometry","setFromPoints","Curve","id","width","color","material","SmoothLine","CatmullRomCurve3","AngularLine","Fatline","speed","current","uniforms","dashOffset","value","Lines","count","colors","lines","Array","fill","pos","random","add","clone","parseInt","length","min","index","Rig","mouse","camera","position","lookAt","App","fov","e","clientX","window","innerWidth","clientY","innerHeight","document","querySelector"],"mappings":"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","sourcesContent":["import { render } from 'react-dom'\nimport React, { useMemo, useRef } from 'react'\nimport * as THREE from 'three'\nimport * as meshline from 'threejs-meshline'\nimport { extend, Canvas, useFrame, useThree } from 'react-three-fiber'\nimport './styles.css'\nimport { EllipseCurve } from 'three'\n\nextend(meshline)\n\nconst Array2THREEVector3 = (points) => {\n  return (points.map(value3D => new THREE.Vector3(value3D[0], value3D[1], value3D[2])))\n};\n\nconst points = [\n  [-10, 0, 0],\n  [0, 5, 0],\n  [10, 0, 0]\n];\n\nconst ellipse = {\n  center: {\n    x: 0,\n    y: 0,\n  },\n  radius: {\n    x: 5,\n    y: 5,\n  },\n  angle: {\n    start: 0,\n    end: 90,\n  }\n}\n\nconst ellipseArray= [0,0,5,5,0*Math.PI / 180, 90 * Math.PI / 180, false, 0]\n\nfunction Ellipse(props, ellipse) {\n  const geometry = useMemo(() => {\n    // const [center, radius, angle] = [ellipse.center, ellipse.radius, ellipse.angle];\n    const curve = new EllipseCurve.apply(ellipseArray)\n    const points = curve.getPoints(50)\n    return new THREE.BufferGeometry().setFromPoints(points)\n  }, [])\n  return (\n    <line geometry={geometry} {...props}>\n      <meshBasicMaterial attach=\"material\" color={\"black\"} />\n    </line>\n  )\n}\n\nconst Curve = ({id, ellipse, width, color}) => {\n  const material = useRef();\n  const [center, radius, angle] = [ellipse.center, ellipse.radius, ellipse.angle];\n  const curve = new THREE.EllipseCurve(\n    center.x, center.y,\n    1, 2,\n    angle.start*Math.PI/180, angle.end*Math.PI/180,\n    false,\n    0).getPoints(50);\n  return (\n    <mesh>\n      <meshLine attach=\"geometry\" vertices={curve} />\n      <meshLineMaterial attach=\"material\" ref={material} lineWidth={width} color={color} />\n    </mesh>\n  )\n};\n\n\nconst SmoothLine = ({id, points, width, color}) => {\n  const material = useRef();\n  const curve = new THREE.CatmullRomCurve3(Array2THREEVector3(points)).getPoints(1000);\n  return (\n    <mesh>\n      <meshLine attach=\"geometry\" vertices={curve} />\n      <meshLineMaterial attach=\"material\" ref={material} lineWidth={width} color={color} />\n    </mesh>\n  )\n};\n\nconst AngularLine = ({id, points, width, color}) => {\n  const material = useRef();\n  return (\n    <mesh>\n      <meshLine attach=\"geometry\" vertices={Array2THREEVector3(points)} />\n      <meshLineMaterial attach=\"material\" ref={material} lineWidth={width} color={color} />\n    </mesh>\n  )\n};\n\n\n\nfunction Fatline({ curve, width, color, speed }) {\n  const material = useRef()\n  useFrame(() => (material.current.uniforms.dashOffset.value -= speed))\n  return (\n    <mesh>\n      <meshLine attach=\"geometry\" vertices={curve} />\n      <meshLineMaterial attach=\"material\" ref={material} transparent depthTest={false} lineWidth={width} color={color} dashArray={0.1} dashRatio={0.9} />\n    </mesh>\n  )\n}\n\nfunction Lines({ count, colors }) {\n  const lines = useMemo(\n    () =>\n      new Array(count).fill().map(() => {\n        const pos = new THREE.Vector3(10 - Math.random() * 20, 10 - Math.random() * 20, 10 - Math.random() * 20)\n        const points = new Array(30).fill().map(() => pos.add(new THREE.Vector3(4 - Math.random() * 8, 4 - Math.random() * 8, 2 - Math.random() * 4)).clone())\n        const curve = new THREE.CatmullRomCurve3(points).getPoints(1000)\n        return {\n          color: colors[parseInt(colors.length * Math.random())],\n          width: Math.min(0.1, 0.5 * Math.random()),\n          speed: Math.min(0.001, 0.0005 * Math.random()),\n          curve\n        }\n      }),\n    [colors, count]\n  )\n  return lines.map((props, index) => <Fatline key={index} {...props} />)\n}\n\nfunction Rig({ mouse }) {\n  const { camera } = useThree()\n  useFrame(() => {\n    camera.position.x += (mouse.current[0] / 50 - camera.position.x) * 0.05\n    camera.position.y += (-mouse.current[1] / 50 - camera.position.y) * 0.05\n    camera.lookAt(0, 0, 0)\n  })\n  return null\n}\n\nfunction App() {\n  const mouse = useRef([0, 0])\n  return (\n    <Canvas\n      camera={{ position: [0, 0, 45], fov: 25 }}\n      onMouseMove={(e) => (mouse.current = [e.clientX - window.innerWidth / 2, e.clientY - window.innerHeight / 2])}>\n      <Lines count={40} colors={['#A2CCB6', '#FCEEB5', '#EE786E', '#e0feff', 'lightpink', 'lightblue']} />\n      <AngularLine id={1} points={points} width={0.1} color={\"blue\"} />\n      <SmoothLine id={2} points={points} width={0.05} color={\"red\"} />\n      {/* <Curve id={3} ellipse={ellipse} width={0.1} color={\"yellow\"} /> */}\n      <Ellipse ellipse={ellipseArray} />\n      <Rig mouse={mouse} />\n    </Canvas>\n  )\n}\n\nrender(<App />, document.querySelector('#root'))\n"]},"metadata":{},"sourceType":"module"}